// Generated by Haxe 4.3.6
using global::Loreline.Internal.Root;

#pragma warning disable 109, 114, 219, 429, 168, 162, IL2026, IL2070, IL2072, IL2060
namespace Loreline.Runtime {
	public class ParseError : global::Loreline.Runtime.Error {
		
		public ParseError(global::Loreline.Internal.Lang.EmptyObject empty) : base(global::Loreline.Internal.Lang.EmptyObject.EMPTY) {
		}
		
		
		public ParseError(string message, global::Loreline.Runtime.Position pos) : base(global::Loreline.Internal.Lang.EmptyObject.EMPTY) {
			global::Loreline.Runtime.ParseError.__hx_ctor_loreline_ParseError(this, message, pos);
		}
		
		
		protected static void __hx_ctor_loreline_ParseError(global::Loreline.Runtime.ParseError __hx_this, string message, global::Loreline.Runtime.Position pos) {
			global::Loreline.Runtime.Error.__hx_ctor_loreline_Error(__hx_this, message, pos);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162, IL2026, IL2070, IL2072, IL2060
namespace Loreline.Runtime {
	public class Parser : global::Loreline.Internal.Lang.HxObject {
		
		static Parser() {
			global::Loreline.Runtime.Parser.parse_parsing = false;
		}
		
		
		public Parser(global::Loreline.Internal.Lang.EmptyObject empty) {
		}
		
		
		public Parser(global::Loreline.Internal.Root.Array<object> tokens) {
			global::Loreline.Runtime.Parser.__hx_ctor_loreline_Parser(this, tokens);
		}
		
		
		protected static void __hx_ctor_loreline_Parser(global::Loreline.Runtime.Parser __hx_this, global::Loreline.Internal.Root.Array<object> tokens) {
			unchecked {
				__hx_this.tokens = tokens;
				__hx_this.current = 0;
				__hx_this.errors = null;
				__hx_this.pendingComments = null;
				__hx_this.lastTokenEnd = new global::Loreline.Runtime.Position(((int) (1) ), ((int) (1) ), ((int) (0) ), default(global::Loreline.Internal.Lang.Null<int>));
				__hx_this.lastLineBreak = null;
				__hx_this.lineBreakAfterToken = false;
				__hx_this.currentNodeId = global::Loreline.Runtime._Node.NodeId_Impl_.UNDEFINED;
				__hx_this.rootBeat = null;
			}
		}
		
		
		public static bool parse_parsing;
		
		public global::Loreline.Internal.Root.Array<object> tokens;
		
		public int current;
		
		public global::Loreline.Internal.Root.Array<object> errors;
		
		public global::Loreline.Internal.Root.Array<object> pendingComments;
		
		public global::Loreline.Runtime.Position lastTokenEnd;
		
		public global::Loreline.Runtime.Position lastLineBreak;
		
		public bool lineBreakAfterToken;
		
		public long currentNodeId;
		
		public global::Loreline.Runtime.NBeatDecl rootBeat;
		
		public virtual global::Loreline.Runtime.Script parse() {
			unchecked {
				bool rootParsing =  ! (global::Loreline.Runtime.Parser.parse_parsing) ;
				if (rootParsing) {
					global::Loreline.Runtime.Parser.parse_parsing = true;
					this.currentNodeId = global::Loreline.Runtime._Node.NodeId_Impl_.UNDEFINED;
				}
				
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Internal.Root.Array<object> nodes = new global::Loreline.Internal.Root.Array<object>(new object[]{});
				global::Loreline.Runtime.Script script = new global::Loreline.Runtime.Script(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((global::Loreline.Internal.Root.Array<object>) (nodes) ));
				while ( ! (this.isAtEnd()) ) {
					try {
						global::Loreline.Runtime.AstNode node = this.parseNode(new global::Loreline.Internal.Lang.Null<bool>(true, true));
						if (( node != null )) {
							nodes.push(node);
						}
						
						while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
						}
						
					}
					catch (global::System.Exception _g){
						object _g1 = global::Loreline.Internal.Exception.caught(_g).unwrap();
						if (( _g1 is global::Loreline.Runtime.ParseError )) {
							global::Loreline.Runtime.ParseError e = ((global::Loreline.Runtime.ParseError) (_g1) );
							{
								this.addError(e);
								this.synchronize();
							}
							
						}
						else {
							throw;
						}
						
					}
					
					
				}
				
				if (rootParsing) {
					global::Loreline.Runtime.Parser.parse_parsing = false;
				}
				
				return script;
			}
		}
		
		
		public virtual global::Loreline.Internal.Root.Array<object> getErrors() {
			if (( this.errors == null )) {
				this.errors = new global::Loreline.Internal.Root.Array<object>(new object[]{});
			}
			
			return this.errors;
		}
		
		
		public virtual long nextNodeId(int step) {
			unchecked {
				long tmp = default(long);
				switch (step) {
					case 1:
					{
						tmp = global::Loreline.Runtime._Node.NodeId_Impl_.nextSection(this.currentNodeId);
						break;
					}
					
					
					case 2:
					{
						tmp = global::Loreline.Runtime._Node.NodeId_Impl_.nextBranch(this.currentNodeId);
						break;
					}
					
					
					case 3:
					{
						tmp = global::Loreline.Runtime._Node.NodeId_Impl_.nextBlock(this.currentNodeId);
						break;
					}
					
					
					case 4:
					{
						tmp = global::Loreline.Runtime._Node.NodeId_Impl_.nextNode(this.currentNodeId);
						break;
					}
					
					
				}
				
				this.currentNodeId = tmp;
				return this.currentNodeId;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token peek() {
			unchecked {
				int i = ( this.current + 1 );
				while (( i < this.tokens.length )) {
					global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[i]) ).type;
					switch (_g._hx_index) {
						case 42:
						{
							string _g1 = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
							 ++ i;
							break;
						}
						
						
						case 43:
						{
							string _g2 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
							 ++ i;
							break;
						}
						
						
						case 46:
						{
							 ++ i;
							break;
						}
						
						
						default:
						{
							return ((global::Loreline.Runtime.Token) (this.tokens[i]) );
						}
						
					}
					
				}
				
				return ((global::Loreline.Runtime.Token) (this.tokens[( this.tokens.length - 1 )]) );
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token advance(global::Loreline.Internal.Lang.Null<bool> advanceLineBreaks) {
			unchecked {
				bool advanceLineBreaks1 = ( ( ! (advanceLineBreaks.hasValue) ) ? (true) : ((advanceLineBreaks).@value) );
				global::Loreline.Runtime.Token prev = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) );
				if ( ! (this.isAtEnd()) ) {
					this.lastTokenEnd = prev.pos;
					this.lineBreakAfterToken = false;
					while (( (  ! (this.isAtEnd())  && ( ((global::Loreline.Runtime.Token) (this.tokens[( this.current + 1 )]) ) != null ) ) && (( this.isComment(((global::Loreline.Runtime.Token) (this.tokens[( this.current + 1 )]) ).type) || ( advanceLineBreaks1 && ( ((global::Loreline.Runtime.Token) (this.tokens[( this.current + 1 )]) ).type == global::Loreline.Runtime.TokenType.LineBreak ) ) )) )) {
						this.current++;
						{
							global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
							switch (_g._hx_index) {
								case 42:
								{
									string content = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
									{
										if (( this.pendingComments == null )) {
											this.pendingComments = new global::Loreline.Internal.Root.Array<object>(new object[]{});
										}
										
										this.pendingComments.push(new global::Loreline.Runtime.Comment(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), ((string) (content) ), ((bool) (false) )));
									}
									
									break;
								}
								
								
								case 43:
								{
									string content1 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
									{
										if (( this.pendingComments == null )) {
											this.pendingComments = new global::Loreline.Internal.Root.Array<object>(new object[]{});
										}
										
										this.pendingComments.push(new global::Loreline.Runtime.Comment(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), ((string) (content1) ), ((bool) (true) )));
									}
									
									break;
								}
								
								
								case 46:
								{
									this.lastLineBreak = this.currentPos();
									this.lineBreakAfterToken = true;
									break;
								}
								
								
								default:
								{
									break;
								}
								
							}
							
						}
						
					}
					
					this.current++;
				}
				
				return prev;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token previous() {
			unchecked {
				return ((global::Loreline.Runtime.Token) (this.tokens[( this.current - 1 )]) );
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token prevWithType(global::Loreline.Runtime.TokenType type) {
			unchecked {
				int n = ( this.current - 1 );
				while (( n >= 0 )) {
					if (global::Loreline.Runtime.TokenTypeHelpers.@equals(((global::Loreline.Runtime.Token) (this.tokens[n]) ).type, type)) {
						return ((global::Loreline.Runtime.Token) (this.tokens[n]) );
					}
					
					 -- n;
				}
				
				return null;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token prevIdentifier() {
			unchecked {
				int n = ( this.current - 1 );
				while (( n >= 0 )) {
					{
						global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[n]) ).type;
						if (( _g._hx_index == 12 )) {
							string _g1 = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
							return ((global::Loreline.Runtime.Token) (this.tokens[n]) );
						}
						
					}
					
					 -- n;
				}
				
				return null;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token prevNonWhitespaceOrComment() {
			unchecked {
				int n = ( this.current - 1 );
				while (( n >= 0 )) {
					{
						global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[n]) ).type;
						switch (_g._hx_index) {
							case 42:
							{
								string _g1 = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
								break;
							}
							
							
							case 43:
							{
								string _g2 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
								break;
							}
							
							
							case 44:
							case 45:
							case 46:
							{
								break;
							}
							
							
							default:
							{
								return ((global::Loreline.Runtime.Token) (this.tokens[n]) );
							}
							
						}
						
					}
					
					 -- n;
				}
				
				return null;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token nextNonWhitespaceOrComment() {
			unchecked {
				int n = this.current;
				while (( n < this.tokens.length )) {
					{
						global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[n]) ).type;
						switch (_g._hx_index) {
							case 42:
							{
								string _g1 = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
								break;
							}
							
							
							case 43:
							{
								string _g2 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
								break;
							}
							
							
							case 44:
							case 45:
							case 46:
							{
								break;
							}
							
							
							default:
							{
								return ((global::Loreline.Runtime.Token) (this.tokens[n]) );
							}
							
						}
						
					}
					
					 ++ n;
				}
				
				return null;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token nextNonLineBreakOrComment() {
			unchecked {
				int n = this.current;
				while (( n < this.tokens.length )) {
					{
						global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[n]) ).type;
						switch (_g._hx_index) {
							case 42:
							{
								string _g1 = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
								break;
							}
							
							
							case 43:
							{
								string _g2 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
								break;
							}
							
							
							case 46:
							{
								break;
							}
							
							
							default:
							{
								return ((global::Loreline.Runtime.Token) (this.tokens[n]) );
							}
							
						}
						
					}
					
					 ++ n;
				}
				
				return null;
			}
		}
		
		
		public virtual global::Loreline.Runtime.Position currentPos() {
			unchecked {
				global::Loreline.Runtime.Token tmp = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) );
				global::Loreline.Runtime.Position tmp1 = ( (( tmp != null )) ? (tmp.pos) : (null) );
				if (( tmp1 != null )) {
					return tmp1;
				}
				else {
					return new global::Loreline.Runtime.Position(((int) (1) ), ((int) (1) ), ((int) (0) ), new global::Loreline.Internal.Lang.Null<int>(0, true));
				}
				
			}
		}
		
		
		public virtual bool check(global::Loreline.Runtime.TokenType type) {
			unchecked {
				if (this.isAtEnd()) {
					return false;
				}
				
				if (( type._hx_index == 33 )) {
					return ( ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type == global::Loreline.Runtime.TokenType.Colon );
				}
				else {
					return global::Loreline.Runtime.TokenTypeHelpers.@equals(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type, type);
				}
				
			}
		}
		
		
		public virtual bool checkString() {
			unchecked {
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				if (( _g._hx_index == 8 )) {
					global::Loreline.Internal.Root.Array<object> _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
					int s = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
					string attachments = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
					return true;
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public virtual bool isAtEnd() {
			if (( this.current < this.tokens.length )) {
				return ( ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type == global::Loreline.Runtime.TokenType.Eof );
			}
			else {
				return true;
			}
			
		}
		
		
		public virtual bool isComment(global::Loreline.Runtime.TokenType type) {
			unchecked {
				switch (type._hx_index) {
					case 42:
					{
						string _g = ( type as global::Loreline.Runtime.TokenType_CommentLine ).content;
						return true;
					}
					
					
					case 43:
					{
						string _g1 = ( type as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
						return true;
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.AstNode parseNode(global::Loreline.Internal.Lang.Null<bool> topLevel) {
			unchecked {
				bool topLevel1 = ( ( ! (topLevel.hasValue) ) ? (false) : ((topLevel).@value) );
				while (( this.isComment(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type) || ( ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type == global::Loreline.Runtime.TokenType.LineBreak ) )) {
					if (this.isComment(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type)) {
						if (( this.pendingComments == null )) {
							this.pendingComments = new global::Loreline.Internal.Root.Array<object>(new object[]{});
						}
						
						global::Loreline.Internal.Root.Array<object> tmp = this.pendingComments;
						long tmp1 = this.nextNodeId(((int) (4) ));
						global::Loreline.Runtime.Position tmp2 = this.currentPos();
						global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
						string tmp3 = null;
						switch (_g._hx_index) {
							case 42:
							{
								string content = ( _g as global::Loreline.Runtime.TokenType_CommentLine ).content;
								tmp3 = content;
								break;
							}
							
							
							case 43:
							{
								string content1 = ( _g as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
								tmp3 = content1;
								break;
							}
							
							
							default:
							{
								tmp3 = "";
								break;
							}
							
						}
						
						global::Loreline.Runtime.TokenType _g1 = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
						bool tmp4 = default(bool);
						if (( _g1._hx_index == 43 )) {
							string _g2 = ( _g1 as global::Loreline.Runtime.TokenType_CommentMultiLine ).content;
							tmp4 = true;
						}
						else {
							tmp4 = false;
						}
						
						tmp.push(new global::Loreline.Runtime.Comment(((long) (tmp1) ), ((global::Loreline.Runtime.Position) (tmp2) ), ((string) (tmp3) ), ((bool) (tmp4) )));
					}
					
					this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
					if (this.isAtEnd()) {
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Unexpected end of file") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
					}
					
				}
				
				if (this.isAtEnd()) {
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Unexpected end of file") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
				}
				
				global::Loreline.Runtime.Parser _gthis = this;
				global::Loreline.Runtime.TokenType _g3 = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				switch (_g3._hx_index) {
					case 0:
					{
						return this.parseImport();
					}
					
					
					case 1:
					{
						return this.parseStateDecl(false);
					}
					
					
					case 2:
					{
						return this.parseBeatDecl();
					}
					
					
					case 3:
					{
						if (topLevel1) {
							return this.parseCharacterDecl();
						}
						else {
							this.addError(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Unexpected token: ", global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) )));
							this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							return new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
						}
						
					}
					
					
					case 4:
					{
						global::Loreline.Runtime.AstNode node = this.parseChoiceStatement();
						if (topLevel1) {
							return _gthis.wrapInRootBeat(node);
						}
						else {
							return node;
						}
						
					}
					
					
					case 5:
					{
						global::Loreline.Runtime.AstNode node1 = this.parseIfStatement();
						if (topLevel1) {
							return _gthis.wrapInRootBeat(node1);
						}
						else {
							return node1;
						}
						
					}
					
					
					case 7:
					{
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						if ( ! (this.check(global::Loreline.Runtime.TokenType.KwState)) ) {
							throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Expected \'state\' after \'new\'") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
						}
						
						global::Loreline.Runtime.AstNode node2 = this.parseStateDecl(true);
						if (topLevel1) {
							return _gthis.wrapInRootBeat(node2);
						}
						else {
							return node2;
						}
						
					}
					
					
					case 8:
					{
						int _g4 = ( _g3 as global::Loreline.Runtime.TokenType_LString ).quotes;
						string _g5 = ( _g3 as global::Loreline.Runtime.TokenType_LString ).s;
						global::Loreline.Internal.Root.Array<object> _g6 = ( _g3 as global::Loreline.Runtime.TokenType_LString ).attachments;
						global::Loreline.Runtime.AstNode node3 = this.parseTextStatement();
						if (topLevel1) {
							return _gthis.wrapInRootBeat(node3);
						}
						else {
							return node3;
						}
						
					}
					
					
					case 9:
					{
						double _g7 = ( _g3 as global::Loreline.Runtime.TokenType_LNumber ).n;
						return this.parseExpressionStatement();
					}
					
					
					case 10:
					{
						bool _g8 = ( _g3 as global::Loreline.Runtime.TokenType_LBoolean ).b;
						return this.parseExpressionStatement();
					}
					
					
					case 12:
					{
						string _g9 = ( _g3 as global::Loreline.Runtime.TokenType_Identifier ).name;
						if (( this.peek().type == global::Loreline.Runtime.TokenType.Colon )) {
							global::Loreline.Runtime.AstNode node4 = this.parseDialogueStatement();
							if (topLevel1) {
								return _gthis.wrapInRootBeat(node4);
							}
							else {
								return node4;
							}
							
						}
						else {
							return this.parseExpressionStatement();
						}
						
					}
					
					
					case 11:
					case 19:
					case 31:
					case 36:
					case 38:
					case 40:
					{
						return this.parseExpressionStatement();
					}
					
					
					case 32:
					{
						global::Loreline.Runtime.AstNode node5 = this.parseTransition();
						if (topLevel1) {
							return _gthis.wrapInRootBeat(node5);
						}
						else {
							return node5;
						}
						
					}
					
					
					default:
					{
						this.addError(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Unexpected token: ", global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) )));
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						return new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NBeatDecl wrapInRootBeat(global::Loreline.Runtime.AstNode node) {
			unchecked {
				global::Loreline.Internal.Root.Array<object> body = null;
				global::Loreline.Runtime.NBeatDecl result = null;
				if (( this.rootBeat == null )) {
					global::Loreline.Runtime.Position startPos = this.currentPos();
					body = new global::Loreline.Internal.Root.Array<object>(new object[]{});
					this.rootBeat = new global::Loreline.Runtime.NBeatDecl(((long) (this.nextNodeId(((int) (1) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((string) ("_") ), ((global::Loreline.Internal.Root.Array<object>) (body) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
					result = this.rootBeat;
				}
				else {
					body = this.rootBeat.body;
				}
				
				body.push(node);
				return result;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NImport parseImport() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NImport imp = new global::Loreline.Runtime.NImport(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(string), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwImport);
				int path = default(int);
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				if (( _g._hx_index == 8 )) {
					string _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
					global::Loreline.Internal.Root.Array<object> _g2 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
					int s = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
					path = s;
				}
				else {
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Expected string literal for import path") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
				}
				
				this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
				global::Loreline.Runtime.NImport __temp_expr1 = ((global::Loreline.Runtime.NImport) (this.attachComments<object>(((object) (imp) ))) );
				return imp;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NDialogueStatement parseDialogueStatement() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NDialogueStatement dialogue = new global::Loreline.Runtime.NDialogueStatement(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(string), default(global::Loreline.Runtime.Position), default(global::Loreline.Runtime.NStringLiteral), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				string tmp = null;
				if (( _g._hx_index == 12 )) {
					string name = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
					tmp = name;
				}
				else {
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Expected character name") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
				}
				
				dialogue.character = tmp;
				dialogue.characterPos = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).pos;
				this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
				this.expect(global::Loreline.Runtime.TokenType.Colon);
				global::Loreline.Runtime.NDialogueStatement __temp_expr1 = ((global::Loreline.Runtime.NDialogueStatement) (this.attachComments<object>(((object) (dialogue) ))) );
				dialogue.content = this.parseStringLiteral();
				dialogue.pos = dialogue.pos.extendedTo(dialogue.content.pos);
				return dialogue;
			}
		}
		
		
		public virtual int parseStatementBlock(global::Loreline.Internal.Root.Array<object> statements) {
			unchecked {
				global::Loreline.Runtime.TokenType blockEnd = ( (( this.parseBlockStart().type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					if (this.check(blockEnd)) {
						break;
					}
					
					try {
						statements.push(this.parseNode(default(global::Loreline.Internal.Lang.Null<bool>)));
					}
					catch (global::System.Exception _g){
						object _g1 = global::Loreline.Internal.Exception.caught(_g).unwrap();
						if (( _g1 is global::Loreline.Runtime.ParseError )) {
							global::Loreline.Runtime.ParseError e = ((global::Loreline.Runtime.ParseError) (_g1) );
							{
								if (( this.errors == null )) {
									this.errors = new global::Loreline.Internal.Root.Array<object>(new object[]{});
								}
								
								this.errors.push(e);
								this.synchronize();
								if (this.check(blockEnd)) {
									break;
								}
								
							}
							
						}
						else {
							throw;
						}
						
					}
					
					
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
				}
				
				this.expect(blockEnd);
				if (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) {
					return ((int) (1) );
				}
				else {
					return ((int) (0) );
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NStateDecl parseStateDecl(bool temporary) {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NStateDecl stateNode = new global::Loreline.Runtime.NStateDecl(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((bool) (temporary) ), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwState);
				global::Loreline.Runtime.TokenType blockEnd = ( (( this.parseBlockStart().type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				stateNode.style = ( (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) ? (((int) (1) )) : (((int) (0) )) );
				global::Loreline.Runtime.NStateDecl __temp_expr1 = ((global::Loreline.Runtime.NStateDecl) (this.attachComments<object>(((object) (stateNode) ))) );
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					stateNode.fields.push(this.parseObjectField());
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
				}
				
				while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
				}
				
				this.expect(blockEnd);
				stateNode.pos = stateNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return stateNode;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NObjectField parseObjectField() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				string name = this.expectIdentifier();
				global::Loreline.Runtime.NObjectField objectField = new global::Loreline.Runtime.NObjectField(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((string) (name) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.Colon);
				global::Loreline.Runtime.NObjectField __temp_expr1 = ((global::Loreline.Runtime.NObjectField) (this.attachComments<object>(((object) (objectField) ))) );
				if (this.checkBlockStart()) {
					objectField.@value = this.parseObjectLiteral();
				}
				else {
					objectField.@value = this.parseExpression();
				}
				
				objectField.pos = objectField.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return objectField;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NBeatDecl parseBeatDecl() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NBeatDecl beatNode = new global::Loreline.Runtime.NBeatDecl(((long) (this.nextNodeId(((int) (1) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(string), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwBeat);
				beatNode.pos = startPos.extendedTo(this.currentPos());
				beatNode.name = this.expectIdentifier();
				global::Loreline.Runtime.Token blockStart = this.parseBlockStart();
				global::Loreline.Runtime.TokenType blockEnd = ( (( blockStart.type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				beatNode.style = ( (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) ? (((int) (1) )) : (((int) (0) )) );
				global::Loreline.Runtime.NBeatDecl __temp_expr1 = ((global::Loreline.Runtime.NBeatDecl) (this.attachComments<object>(((object) (beatNode) ))) );
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					beatNode.body.push(this.parseNode(default(global::Loreline.Internal.Lang.Null<bool>)));
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
				}
				
				while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
				}
				
				this.expect(blockEnd);
				beatNode.pos = beatNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return beatNode;
			}
		}
		
		
		public virtual bool checkBlockStart() {
			unchecked {
				global::Loreline.Runtime.Token indentToken = null;
				global::Loreline.Runtime.Token braceToken = null;
				int numIndents = 0;
				int i = 0;
				while (( ( this.current + i ) < this.tokens.length )) {
					global::Loreline.Runtime.Token token = ((global::Loreline.Runtime.Token) (this.tokens[( this.current + i )]) );
					 ++ i;
					if (( token.type == global::Loreline.Runtime.TokenType.LineBreak )) {
						continue;
					}
					
					if (( token.type == global::Loreline.Runtime.TokenType.Indent )) {
						 ++ numIndents;
						indentToken = token;
						continue;
					}
					
					if (( token.type == global::Loreline.Runtime.TokenType.LBrace )) {
						if (( braceToken == null )) {
							braceToken = token;
						}
						
						continue;
					}
					
					break;
				}
				
				if (( braceToken != null )) {
					return true;
				}
				else if (( indentToken != null )) {
					if (( numIndents > 1 )) {
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Invalid indentation level") ), ((global::Loreline.Runtime.Position) (indentToken.pos) )))) );
					}
					
					return true;
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.Token parseBlockStart() {
			unchecked {
				global::Loreline.Runtime.Token indentToken = null;
				global::Loreline.Runtime.Token braceToken = null;
				int numIndents = 0;
				while ( ! (this.isAtEnd()) ) {
					if (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
						continue;
					}
					
					if (this.match(global::Loreline.Runtime.TokenType.Indent, default(global::Loreline.Internal.Lang.Null<bool>))) {
						 ++ numIndents;
						indentToken = this.prevWithType(global::Loreline.Runtime.TokenType.Indent);
						continue;
					}
					
					if (this.match(global::Loreline.Runtime.TokenType.LBrace, default(global::Loreline.Internal.Lang.Null<bool>))) {
						if (( braceToken == null )) {
							braceToken = this.prevWithType(global::Loreline.Runtime.TokenType.LBrace);
						}
						
						continue;
					}
					
					break;
				}
				
				if (( braceToken != null )) {
					return braceToken;
				}
				else if (( indentToken != null )) {
					if (( numIndents > 1 )) {
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Invalid indentation level") ), ((global::Loreline.Runtime.Position) (indentToken.pos) )))) );
					}
					
					return indentToken;
				}
				else {
					this.addError(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat("Expected ", global::Loreline.Internal.Root.Std.@string(global::Loreline.Runtime.TokenType.LBrace)), " or "), global::Loreline.Internal.Root.Std.@string(global::Loreline.Runtime.TokenType.Indent)), ", got "), global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) )));
					return new global::Loreline.Runtime.Token(((global::Loreline.Runtime.TokenType) (global::Loreline.Runtime.TokenType.Indent) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ));
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NCharacterDecl parseCharacterDecl() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NCharacterDecl characterNode = new global::Loreline.Runtime.NCharacterDecl(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(string), default(global::Loreline.Runtime.Position), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwCharacter);
				characterNode.name = this.expectIdentifier();
				characterNode.namePos = this.prevNonWhitespaceOrComment().pos;
				global::Loreline.Runtime.TokenType blockEnd = ( (( this.parseBlockStart().type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				characterNode.style = ( (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) ? (((int) (1) )) : (((int) (0) )) );
				global::Loreline.Runtime.NCharacterDecl __temp_expr1 = ((global::Loreline.Runtime.NCharacterDecl) (this.attachComments<object>(((object) (characterNode) ))) );
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					characterNode.fields.push(this.parseObjectField());
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
				}
				
				while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
				}
				
				this.expect(blockEnd);
				characterNode.pos = characterNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return characterNode;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NTextStatement parseTextStatement() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NTextStatement statement = ((global::Loreline.Runtime.NTextStatement) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NTextStatement(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(global::Loreline.Runtime.NStringLiteral), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
				statement.content = this.parseStringLiteral();
				return statement;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NChoiceStatement parseChoiceStatement() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NChoiceStatement choiceNode = new global::Loreline.Runtime.NChoiceStatement(((long) (this.nextNodeId(((int) (2) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwChoice);
				global::Loreline.Runtime.TokenType blockEnd = ( (( this.parseBlockStart().type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				choiceNode.style = ( (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) ? (((int) (1) )) : (((int) (0) )) );
				global::Loreline.Runtime.NChoiceStatement __temp_expr1 = ((global::Loreline.Runtime.NChoiceStatement) (this.attachComments<object>(((object) (choiceNode) ))) );
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					choiceNode.options.push(this.parseChoiceOption(blockEnd));
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
				}
				
				this.expect(blockEnd);
				choiceNode.pos = choiceNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return choiceNode;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NChoiceOption parseChoiceOption(global::Loreline.Runtime.TokenType blockEnd) {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NChoiceOption choiceOption = ((global::Loreline.Runtime.NChoiceOption) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NChoiceOption(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(global::Loreline.Runtime.NStringLiteral), default(global::Loreline.Runtime.NExpr), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{})) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
				choiceOption.text = this.parseStringLiteral();
				if (this.match(global::Loreline.Runtime.TokenType.KwIf, default(global::Loreline.Internal.Lang.Null<bool>))) {
					choiceOption.condition = this.parseConditionExpression();
				}
				
				if (this.checkBlockStart()) {
					choiceOption.body = new global::Loreline.Internal.Root.Array<object>(new object[]{});
					choiceOption.style = this.parseStatementBlock(choiceOption.body);
				}
				else if ( ! (this.check(blockEnd)) ) {
					choiceOption.body = new global::Loreline.Internal.Root.Array<object>(new object[]{this.parseNode(default(global::Loreline.Internal.Lang.Null<bool>))});
					choiceOption.style = ((int) (0) );
				}
				
				choiceOption.pos = choiceOption.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return choiceOption;
			}
		}
		
		
		public virtual bool isExpressionStart() {
			unchecked {
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				switch (_g._hx_index) {
					case 8:
					{
						int _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
						string _g2 = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
						global::Loreline.Internal.Root.Array<object> _g3 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
						return true;
					}
					
					
					case 9:
					{
						double _g4 = ( _g as global::Loreline.Runtime.TokenType_LNumber ).n;
						return true;
					}
					
					
					case 10:
					{
						bool _g5 = ( _g as global::Loreline.Runtime.TokenType_LBoolean ).b;
						return true;
					}
					
					
					case 12:
					{
						string _g6 = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
						if (( this.peek().type == global::Loreline.Runtime.TokenType.Colon )) {
							return false;
						}
						else {
							return true;
						}
						
					}
					
					
					case 11:
					case 19:
					case 31:
					case 36:
					case 38:
					case 40:
					{
						return true;
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.AstNode parseExpressionStatement() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseExpression();
				if (( ( ( ( this.match(global::Loreline.Runtime.TokenType.OpAssign, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpPlusAssign, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpMinusAssign, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpMultiplyAssign, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpDivideAssign, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NAssign assignment = ((global::Loreline.Runtime.NAssign) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NAssign(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					assignment.@value = this.parseExpression();
					assignment.pos = assignment.pos.extendedTo(assignment.@value.pos);
					return assignment;
				}
				
				return ((global::Loreline.Runtime.NExpr) (this.attachComments<object>(((object) (expr) ))) );
			}
		}
		
		
		public virtual bool isKnownNodeStart() {
			unchecked {
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				switch (_g._hx_index) {
					case 8:
					{
						int _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
						string _g2 = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
						global::Loreline.Internal.Root.Array<object> _g3 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
						return true;
					}
					
					
					case 12:
					{
						string _g4 = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
						if (( this.peek().type == global::Loreline.Runtime.TokenType.Colon )) {
							return true;
						}
						else if (( this.peek().type == global::Loreline.Runtime.TokenType.Arrow )) {
							return true;
						}
						else {
							return false;
						}
						
					}
					
					
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 32:
					{
						return true;
					}
					
					
					default:
					{
						return false;
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NIfStatement parseIfStatement() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.NIfStatement ifNode = new global::Loreline.Runtime.NIfStatement(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Runtime.NBlock), default(global::Loreline.Runtime.NBlock), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.KwIf);
				ifNode.condition = this.parseConditionExpression();
				while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
				}
				
				global::Loreline.Runtime.NIfStatement __temp_expr1 = ((global::Loreline.Runtime.NIfStatement) (this.attachComments<object>(((object) (ifNode) ))) );
				ifNode.thenBranch = new global::Loreline.Runtime.NBlock(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				ifNode.thenBranch.body = new global::Loreline.Internal.Root.Array<object>(new object[]{});
				ifNode.thenBranch.style = this.parseStatementBlock(ifNode.thenBranch.body);
				global::Loreline.Runtime.Token elseToken = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) );
				if (( ( elseToken != null ) && ( elseToken.type == global::Loreline.Runtime.TokenType.KwElse ) )) {
					this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
					while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
					}
					
					global::Loreline.Runtime.NIfStatement __temp_expr2 = ((global::Loreline.Runtime.NIfStatement) (this.attachElseComments<object>(((object) (ifNode) ), ((global::Loreline.Runtime.Token) (elseToken) ))) );
					if (this.check(global::Loreline.Runtime.TokenType.KwIf)) {
						ifNode.elseBranch = new global::Loreline.Runtime.NBlock(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
						global::Loreline.Runtime.NIfStatement tmp = this.parseIfStatement();
						ifNode.elseBranch.body = new global::Loreline.Internal.Root.Array<object>(new object[]{tmp});
						ifNode.elseBranch.style = ((int) (0) );
					}
					else {
						ifNode.elseBranch = new global::Loreline.Runtime.NBlock(((long) (this.nextNodeId(((int) (3) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
						ifNode.elseBranch.body = new global::Loreline.Internal.Root.Array<object>(new object[]{});
						ifNode.elseBranch.style = this.parseStatementBlock(ifNode.elseBranch.body);
					}
					
				}
				
				ifNode.pos = ifNode.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return ifNode;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NTransition parseTransition() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				this.expect(global::Loreline.Runtime.TokenType.Arrow);
				if (this.match(global::Loreline.Runtime.TokenType.Dot, default(global::Loreline.Internal.Lang.Null<bool>))) {
					return ((global::Loreline.Runtime.NTransition) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NTransition(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos.extendedTo(this.prevNonWhitespaceOrComment().pos)) ), ((string) (".") ), ((global::Loreline.Runtime.Position) (this.prevNonWhitespaceOrComment().pos) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
				}
				
				string target = this.expectIdentifier();
				return ((global::Loreline.Runtime.NTransition) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NTransition(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos.extendedTo(this.prevNonWhitespaceOrComment().pos)) ), ((string) (target) ), ((global::Loreline.Runtime.Position) (this.prevNonWhitespaceOrComment().pos) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseExpression() {
			unchecked {
				try {
					global::Loreline.Runtime.NExpr expr = this.parseLogicalOr();
					if (( ( ( ( this.check(global::Loreline.Runtime.TokenType.OpAssign) || this.check(global::Loreline.Runtime.TokenType.OpPlusAssign) ) || this.check(global::Loreline.Runtime.TokenType.OpMinusAssign) ) || this.check(global::Loreline.Runtime.TokenType.OpMultiplyAssign) ) || this.check(global::Loreline.Runtime.TokenType.OpDivideAssign) )) {
						global::Loreline.Runtime.TokenType op = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						global::Loreline.Runtime.NAssign assignment = ((global::Loreline.Runtime.NAssign) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NAssign(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
						assignment.@value = this.parseExpression();
						assignment.pos = assignment.pos.extendedTo(assignment.@value.pos);
						return assignment;
					}
					
					return expr;
				}
				catch (global::System.Exception _g){
					object e = ((object) (global::Loreline.Internal.Exception.caught(_g).unwrap()) );
					if (( e is global::Loreline.Runtime.ParseError )) {
						this.addError(((global::Loreline.Runtime.ParseError) (e) ));
					}
					
					return new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				}
				
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseLogicalOr() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseLogicalAnd();
				while (this.match(global::Loreline.Runtime.TokenType.OpOr(false), default(global::Loreline.Internal.Lang.Null<bool>))) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseLogicalAnd();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseLogicalAnd() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseEquality();
				while (this.match(global::Loreline.Runtime.TokenType.OpAnd(false), default(global::Loreline.Internal.Lang.Null<bool>))) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseEquality();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseEquality() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseComparison();
				while (( this.match(global::Loreline.Runtime.TokenType.OpEquals, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpNotEquals, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseComparison();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseComparison() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseAdditive();
				while (( ( ( this.match(global::Loreline.Runtime.TokenType.OpGreater, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpGreaterEq, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpLess, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpLessEq, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseAdditive();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseAdditive() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseMultiplicative();
				while (( this.match(global::Loreline.Runtime.TokenType.OpPlus, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpMinus, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseMultiplicative();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseMultiplicative() {
			unchecked {
				global::Loreline.Runtime.NExpr expr = this.parseUnary();
				while (( ( this.match(global::Loreline.Runtime.TokenType.OpMultiply, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpDivide, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.OpModulo, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NBinary binary = ((global::Loreline.Runtime.NBinary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NBinary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (expr.pos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					binary.right = this.parseUnary();
					binary.pos = binary.pos.extendedTo(binary.right.pos);
					expr = binary;
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseUnary() {
			unchecked {
				if (( this.match(global::Loreline.Runtime.TokenType.OpNot, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.OpMinus, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					global::Loreline.Runtime.TokenType op = this.previous().type;
					global::Loreline.Runtime.NUnary unary = ((global::Loreline.Runtime.NUnary) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NUnary(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.previous().pos) ), ((global::Loreline.Runtime.TokenType) (op) ), default(global::Loreline.Runtime.NExpr), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					unary.operand = this.parseUnary();
					unary.pos = unary.pos.extendedTo(unary.operand.pos);
					return unary;
				}
				
				return this.parsePrimary();
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parsePrimary() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				switch (_g._hx_index) {
					case 8:
					{
						int _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
						string _g2 = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
						global::Loreline.Internal.Root.Array<object> _g3 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
						return this.parseStringLiteral();
					}
					
					
					case 9:
					{
						double n = ( _g as global::Loreline.Runtime.TokenType_LNumber ).n;
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						return ((global::Loreline.Runtime.NLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((object) (n) ), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Number) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					
					
					case 10:
					{
						bool b = ( _g as global::Loreline.Runtime.TokenType_LBoolean ).b;
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						return ((global::Loreline.Runtime.NLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((object) (b) ), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Boolean) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					
					
					case 11:
					{
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						return ((global::Loreline.Runtime.NLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					
					
					case 12:
					{
						string name = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
						if (( this.peek().type == global::Loreline.Runtime.TokenType.Colon )) {
							global::Loreline.Internal.Root.Array<object> fields = new global::Loreline.Internal.Root.Array<object>(new object[]{this.parseObjectField()});
							return new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos.extendedTo(this.prevNonWhitespaceOrComment().pos)) ), ((object) (fields) ), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Object(((int) (0) ))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
						}
						else {
							this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							return this.parseIdentifierExpression(startPos, name);
						}
						
					}
					
					
					case 36:
					{
						return this.parseObjectLiteral();
					}
					
					
					case 38:
					{
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						global::Loreline.Runtime.NExpr expr = this.parseExpression();
						this.expect(global::Loreline.Runtime.TokenType.RParen);
						return expr;
					}
					
					
					case 40:
					{
						return this.parseArrayLiteral();
					}
					
					
					default:
					{
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Unexpected token in expression") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.NStringLiteral parseStringLiteral() {
			unchecked {
				global::Loreline.Runtime.Position stringLiteralPos = this.currentPos();
				global::Loreline.Internal.Root.Array<object> parts = new global::Loreline.Internal.Root.Array<object>();
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				if (( _g._hx_index == 8 )) {
					int quotes = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
					string content = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
					global::Loreline.Internal.Root.Array<object> attachments = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
					global::Loreline.Runtime.Position startPos = ( (( quotes != ((int) (0) ) )) ? (stringLiteralPos.withOffset(content, 1, new global::Loreline.Internal.Lang.Null<int>(( stringLiteralPos.length - 2 ), true))) : (stringLiteralPos) );
					int currentPos = 0;
					if (( ( attachments == null ) || ( attachments.length == 0 ) )) {
						global::Loreline.Runtime.Position partPos = this.makeStringPartPosition(startPos, content, 0);
						partPos.length = startPos.length;
						long literalId = this.nextNodeId(((int) (4) ));
						long partId = this.nextNodeId(((int) (4) ));
						parts.push(new global::Loreline.Runtime.NStringPart(((long) (partId) ), ((global::Loreline.Runtime.Position) (partPos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(content)) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
						this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
						return ((global::Loreline.Runtime.NStringLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NStringLiteral(((long) (literalId) ), ((global::Loreline.Runtime.Position) (stringLiteralPos) ), ((int) (quotes) ), ((global::Loreline.Internal.Root.Array<object>) (parts) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					
					global::Loreline.Runtime.NStringLiteral stringLiteral = ((global::Loreline.Runtime.NStringLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NStringLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (stringLiteralPos) ), ((int) (quotes) ), ((global::Loreline.Internal.Root.Array<object>) (parts) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					{
						int _g1 = 0;
						int _g2 = attachments.length;
						while (( _g1 < _g2 )) {
							int i = _g1++;
							{
								global::Loreline.Runtime.LStringAttachment _g3 = ((global::Loreline.Runtime.LStringAttachment) (attachments[i]) );
								switch (_g3._hx_index) {
									case 0:
									{
										bool braces = ( _g3 as global::Loreline.Runtime.LStringAttachment_Interpolation ).braces;
										bool inTag = ( _g3 as global::Loreline.Runtime.LStringAttachment_Interpolation ).inTag;
										global::Loreline.Internal.Root.Array<object> tokens = ( _g3 as global::Loreline.Runtime.LStringAttachment_Interpolation ).expr;
										int start = ( _g3 as global::Loreline.Runtime.LStringAttachment_Interpolation ).start;
										int length = ( _g3 as global::Loreline.Runtime.LStringAttachment_Interpolation ).length;
										{
											if (( currentPos >= ( start + length ) )) {
												continue;
											}
											
											if (( start > currentPos )) {
												global::Loreline.Runtime.Position partPos1 = this.makeStringPartPosition(startPos, content, currentPos);
												partPos1.length = ( start - currentPos );
												parts.push(new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos1) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, currentPos, new global::Loreline.Internal.Lang.Null<int>(( start - currentPos ), true)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
											}
											
											parts.push(this.parseStringInterpolation(braces, inTag, tokens, start, length, content));
											currentPos = ( start + length );
										}
										
										break;
									}
									
									
									case 1:
									{
										bool closing = ( _g3 as global::Loreline.Runtime.LStringAttachment_Tag ).closing;
										int start1 = ( _g3 as global::Loreline.Runtime.LStringAttachment_Tag ).start;
										int length1 = ( _g3 as global::Loreline.Runtime.LStringAttachment_Tag ).length;
										{
											if (( currentPos >= ( start1 + length1 ) )) {
												continue;
											}
											
											if (( start1 > currentPos )) {
												global::Loreline.Runtime.Position partPos2 = this.makeStringPartPosition(startPos, content, currentPos);
												partPos2.length = ( start1 - currentPos );
												parts.push(new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos2) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, currentPos, new global::Loreline.Internal.Lang.Null<int>(( start1 - currentPos ), true)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
											}
											
											parts.push(this.parseStringTag(closing, start1, length1, content, quotes, attachments));
											currentPos = ( start1 + length1 );
										}
										
										break;
									}
									
									
								}
								
							}
							
						}
						
					}
					
					if (( currentPos < content.Length )) {
						global::Loreline.Runtime.Position partPos3 = this.makeStringPartPosition(startPos, content, currentPos);
						partPos3.length = ( content.Length - currentPos );
						global::Loreline.Internal.Lang.Null<int> len = default(global::Loreline.Internal.Lang.Null<int>);
						parts.push(new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos3) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, currentPos, len))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
					}
					
					this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
					return stringLiteral;
				}
				else {
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Expected string, got ", global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.Position makeStringPartPosition(global::Loreline.Runtime.Position stringStart, string content, int offset) {
			unchecked {
				int line = stringStart.line;
				int column = stringStart.column;
				{
					int _g = 0;
					int _g1 = offset;
					while (( _g < _g1 )) {
						int i = _g++;
						if (global::Loreline.Internal.Lang.Runtime.eq((global::Loreline.Internal.Lang.StringExt.charCodeAt(content, i)).toDynamic(), 10)) {
							 ++ line;
							column = 1;
						}
						else {
							 ++ column;
						}
						
					}
					
				}
				
				return new global::Loreline.Runtime.Position(((int) (line) ), ((int) (column) ), ((int) (( stringStart.offset + offset )) ), default(global::Loreline.Internal.Lang.Null<int>));
			}
		}
		
		
		public virtual global::Loreline.Runtime.NAccess makeAccess(global::Loreline.Runtime.Position pos, global::Loreline.Runtime.NExpr target, string name, global::Loreline.Runtime.Position namePos) {
			unchecked {
				if (( name != null )) {
					if (( name.Length == 0 )) {
						if (( ( this.errors == null ) || ( this.errors.length == 0 ) )) {
							this.addError(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Invalid access: ", (( (( name != null )) ? (global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat("\'", name), "\'")) : ("null") )))) ), ((global::Loreline.Runtime.Position) (pos) )));
						}
						
					}
					
					if (( target != null )) {
						if (( namePos != null )) {
							pos = new global::Loreline.Runtime.Position(((int) (target.pos.line) ), ((int) (target.pos.column) ), ((int) (target.pos.offset) ), new global::Loreline.Internal.Lang.Null<int>(( ( namePos.offset + name.Length ) - target.pos.offset ), true));
						}
						else {
							throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Invalid access (missing name position)") ), ((global::Loreline.Runtime.Position) (pos) )))) );
						}
						
					}
					else if (( pos.length == 0 )) {
						global::Loreline.Internal.Lang.Null<int> tmp = ( (( namePos != null )) ? (new global::Loreline.Internal.Lang.Null<int>(namePos.length, true)) : (default(global::Loreline.Internal.Lang.Null<int>)) );
						pos = new global::Loreline.Runtime.Position(((int) (pos.line) ), ((int) (pos.column) ), ((int) (pos.offset) ), new global::Loreline.Internal.Lang.Null<int>(( (tmp.hasValue) ? ((tmp).@value) : (name.Length) ), true));
					}
					
				}
				
				return new global::Loreline.Runtime.NAccess(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.NExpr) (target) ), ((string) (name) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
			}
		}
		
		
		public virtual global::Loreline.Runtime.NStringPart parseStringInterpolation(bool braces, bool inTag, global::Loreline.Internal.Root.Array<object> tokens, int start, int length, string content) {
			unchecked {
				global::Loreline.Runtime.Token tmp = ((global::Loreline.Runtime.Token) (tokens[0]) );
				global::Loreline.Runtime.Position tmp1 = ( (( tmp != null )) ? (tmp.pos) : (null) );
				global::Loreline.Runtime.Position pos = this.makeStringPartPosition(( (( tmp1 != null )) ? (tmp1) : (this.currentPos()) ), content, start);
				pos.length = length;
				if (( tokens.length == 0 )) {
					global::Loreline.Runtime.Token tmp2 = ((global::Loreline.Runtime.Token) (tokens[0]) );
					global::Loreline.Runtime.Position tmp3 = ( (( tmp2 != null )) ? (tmp2.pos) : (null) );
					this.addError(new global::Loreline.Runtime.ParseError(((string) ("Empty interpolation") ), ((global::Loreline.Runtime.Position) (( (( tmp3 != null )) ? (tmp3) : (this.currentPos()) )) )));
					long tmp4 = this.nextNodeId(((int) (4) ));
					long tmp5 = this.nextNodeId(((int) (4) ));
					global::Loreline.Runtime.Token tmp6 = ((global::Loreline.Runtime.Token) (tokens[0]) );
					global::Loreline.Runtime.Position tmp7 = ( (( tmp6 != null )) ? (tmp6.pos) : (null) );
					return new global::Loreline.Runtime.NStringPart(((long) (tmp4) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp5) ), ((global::Loreline.Runtime.Position) (( (( tmp7 != null )) ? (tmp7) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				}
				
				global::Loreline.Runtime.NExpr expr = null;
				if ((  ! (braces)  && ( tokens.length > 0 ) )) {
					global::Loreline.Runtime.NExpr target = null;
					int i = 0;
					bool prevIsDot = false;
					while (( i < tokens.length )) {
						global::Loreline.Runtime.Token token = ((global::Loreline.Runtime.Token) (tokens[i]) );
						 ++ i;
						{
							global::Loreline.Runtime.TokenType _g = token.type;
							switch (_g._hx_index) {
								case 12:
								{
									string name = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
									{
										if (( target == null )) {
											target = ((global::Loreline.Runtime.NAccess) (this.attachComments<object>(((object) (this.makeAccess(token.pos, null, name, null)) ))) );
										}
										else if (prevIsDot) {
											target = ((global::Loreline.Runtime.NAccess) (this.attachComments<object>(((object) (this.makeAccess(token.pos, target, name, token.pos)) ))) );
										}
										else {
											this.addError(new global::Loreline.Runtime.ParseError(((string) ("Missing dot in field access") ), ((global::Loreline.Runtime.Position) (token.pos) )));
											long tmp8 = this.nextNodeId(((int) (4) ));
											long tmp9 = this.nextNodeId(((int) (4) ));
											global::Loreline.Runtime.Token tmp10 = ((global::Loreline.Runtime.Token) (tokens[0]) );
											global::Loreline.Runtime.Position tmp11 = ( (( tmp10 != null )) ? (tmp10.pos) : (null) );
											return new global::Loreline.Runtime.NStringPart(((long) (tmp8) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp9) ), ((global::Loreline.Runtime.Position) (( (( tmp11 != null )) ? (tmp11) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
										}
										
										prevIsDot = false;
									}
									
									break;
								}
								
								
								case 35:
								{
									if (( target == null )) {
										this.addError(new global::Loreline.Runtime.ParseError(((string) ("Leading dot in field access") ), ((global::Loreline.Runtime.Position) (token.pos) )));
										long tmp12 = this.nextNodeId(((int) (4) ));
										long tmp13 = this.nextNodeId(((int) (4) ));
										global::Loreline.Runtime.Token tmp14 = ((global::Loreline.Runtime.Token) (tokens[0]) );
										global::Loreline.Runtime.Position tmp15 = ( (( tmp14 != null )) ? (tmp14.pos) : (null) );
										return new global::Loreline.Runtime.NStringPart(((long) (tmp12) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp13) ), ((global::Loreline.Runtime.Position) (( (( tmp15 != null )) ? (tmp15) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
									}
									
									prevIsDot = true;
									break;
								}
								
								
								case 38:
								{
									if (( target == null )) {
										this.addError(new global::Loreline.Runtime.ParseError(((string) ("Function call without target") ), ((global::Loreline.Runtime.Position) (token.pos) )));
										long tmp16 = this.nextNodeId(((int) (4) ));
										long tmp17 = this.nextNodeId(((int) (4) ));
										global::Loreline.Runtime.Token tmp18 = ((global::Loreline.Runtime.Token) (tokens[0]) );
										global::Loreline.Runtime.Position tmp19 = ( (( tmp18 != null )) ? (tmp18.pos) : (null) );
										return new global::Loreline.Runtime.NStringPart(((long) (tmp16) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp17) ), ((global::Loreline.Runtime.Position) (( (( tmp19 != null )) ? (tmp19) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
									}
									
									global::Loreline.Runtime.Position callStart = token.pos;
									global::Loreline.Internal.Root.Array<object> argTokens = new global::Loreline.Internal.Root.Array<object>(new object[]{});
									global::Loreline.Internal.Root.Array<object> currentArgTokens = new global::Loreline.Internal.Root.Array<object>(new object[]{});
									int parenLevel = 1;
									while (( ( i < tokens.length ) && ( parenLevel > 0 ) )) {
										global::Loreline.Runtime.Token t = ((global::Loreline.Runtime.Token) (tokens[i]) );
										 ++ i;
										switch (t.type._hx_index) {
											case 34:
											{
												if (( parenLevel == 1 )) {
													if (( currentArgTokens.length > 0 )) {
														argTokens.push(currentArgTokens);
														currentArgTokens = new global::Loreline.Internal.Root.Array<object>(new object[]{});
													}
													
												}
												else {
													currentArgTokens.push(t);
												}
												
												break;
											}
											
											
											case 38:
											{
												 ++ parenLevel;
												currentArgTokens.push(t);
												break;
											}
											
											
											case 39:
											{
												 -- parenLevel;
												if (( parenLevel > 0 )) {
													currentArgTokens.push(t);
												}
												else if (( currentArgTokens.length > 0 )) {
													argTokens.push(currentArgTokens);
												}
												
												break;
											}
											
											
											default:
											{
												currentArgTokens.push(t);
												break;
											}
											
										}
										
									}
									
									if (( parenLevel > 0 )) {
										this.addError(new global::Loreline.Runtime.ParseError(((string) ("Unterminated function call") ), ((global::Loreline.Runtime.Position) (callStart) )));
										long tmp20 = this.nextNodeId(((int) (4) ));
										long tmp21 = this.nextNodeId(((int) (4) ));
										global::Loreline.Runtime.Token tmp22 = ((global::Loreline.Runtime.Token) (tokens[0]) );
										global::Loreline.Runtime.Position tmp23 = ( (( tmp22 != null )) ? (tmp22.pos) : (null) );
										return new global::Loreline.Runtime.NStringPart(((long) (tmp20) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp21) ), ((global::Loreline.Runtime.Position) (( (( tmp23 != null )) ? (tmp23) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
									}
									
									global::Loreline.Internal.Root.Array<object> args = new global::Loreline.Internal.Root.Array<object>(new object[]{});
									{
										int _g1 = 0;
										while (( _g1 < argTokens.length )) {
											global::Loreline.Internal.Root.Array<object> argTokenGroup = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (argTokens[_g1]) ))) );
											 ++ _g1;
											global::Loreline.Runtime.Parser tempParser = new global::Loreline.Runtime.Parser(((global::Loreline.Internal.Root.Array<object>) (argTokenGroup) ));
											tempParser.currentNodeId = this.currentNodeId;
											args.push(tempParser.parseExpression());
											this.currentNodeId = tempParser.currentNodeId;
										}
										
									}
									
									target = ((global::Loreline.Runtime.NCall) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NCall(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (callStart.extendedTo(((global::Loreline.Runtime.Token) (tokens[( i - 1 )]) ).pos)) ), ((global::Loreline.Runtime.NExpr) (target) ), ((global::Loreline.Internal.Root.Array<object>) (args) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
									prevIsDot = false;
									break;
								}
								
								
								case 40:
								{
									if (( target == null )) {
										this.addError(new global::Loreline.Runtime.ParseError(((string) ("Array access without target") ), ((global::Loreline.Runtime.Position) (token.pos) )));
										long tmp24 = this.nextNodeId(((int) (4) ));
										long tmp25 = this.nextNodeId(((int) (4) ));
										global::Loreline.Runtime.Token tmp26 = ((global::Loreline.Runtime.Token) (tokens[0]) );
										global::Loreline.Runtime.Position tmp27 = ( (( tmp26 != null )) ? (tmp26.pos) : (null) );
										return new global::Loreline.Runtime.NStringPart(((long) (tmp24) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp25) ), ((global::Loreline.Runtime.Position) (( (( tmp27 != null )) ? (tmp27) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
									}
									
									global::Loreline.Runtime.Position arrayStart = token.pos;
									global::Loreline.Internal.Root.Array<object> arrayTokens = new global::Loreline.Internal.Root.Array<object>(new object[]{});
									int bracketLevel = 1;
									global::Loreline.Runtime.Token lastRBracket = null;
									while (( ( i < tokens.length ) && ( bracketLevel > 0 ) )) {
										global::Loreline.Runtime.Token t1 = ((global::Loreline.Runtime.Token) (tokens[i]) );
										 ++ i;
										switch (t1.type._hx_index) {
											case 40:
											{
												 ++ bracketLevel;
												arrayTokens.push(t1);
												break;
											}
											
											
											case 41:
											{
												 -- bracketLevel;
												if (( bracketLevel > 0 )) {
													arrayTokens.push(t1);
												}
												
												lastRBracket = t1;
												break;
											}
											
											
											default:
											{
												arrayTokens.push(t1);
												break;
											}
											
										}
										
									}
									
									if (( bracketLevel > 0 )) {
										this.addError(new global::Loreline.Runtime.ParseError(((string) ("Unterminated array access") ), ((global::Loreline.Runtime.Position) (arrayStart) )));
										long tmp28 = this.nextNodeId(((int) (4) ));
										long tmp29 = this.nextNodeId(((int) (4) ));
										global::Loreline.Runtime.Token tmp30 = ((global::Loreline.Runtime.Token) (tokens[0]) );
										global::Loreline.Runtime.Position tmp31 = ( (( tmp30 != null )) ? (tmp30.pos) : (null) );
										return new global::Loreline.Runtime.NStringPart(((long) (tmp28) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp29) ), ((global::Loreline.Runtime.Position) (( (( tmp31 != null )) ? (tmp31) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
									}
									
									global::Loreline.Runtime.Parser tempParser1 = new global::Loreline.Runtime.Parser(((global::Loreline.Internal.Root.Array<object>) (arrayTokens) ));
									tempParser1.currentNodeId = this.currentNodeId;
									global::Loreline.Runtime.NExpr indexExpr = tempParser1.parseExpression();
									this.currentNodeId = tempParser1.currentNodeId;
									global::Loreline.Runtime.Position accessPos = pos.extendedTo(((global::Loreline.Runtime.Token) (tokens[( i - 1 )]) ).pos);
									accessPos.length += 1;
									target = ((global::Loreline.Runtime.NArrayAccess) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NArrayAccess(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (accessPos) ), ((global::Loreline.Runtime.NExpr) (target) ), ((global::Loreline.Runtime.NExpr) (indexExpr) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
									prevIsDot = false;
									break;
								}
								
								
								default:
								{
									this.addError(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Unexpected token in field access: ", global::Loreline.Internal.Root.Std.@string(token.type))) ), ((global::Loreline.Runtime.Position) (token.pos) )));
									long tmp32 = this.nextNodeId(((int) (4) ));
									long tmp33 = this.nextNodeId(((int) (4) ));
									global::Loreline.Runtime.Token tmp34 = ((global::Loreline.Runtime.Token) (tokens[0]) );
									global::Loreline.Runtime.Position tmp35 = ( (( tmp34 != null )) ? (tmp34.pos) : (null) );
									return new global::Loreline.Runtime.NStringPart(((long) (tmp32) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(new global::Loreline.Runtime.NLiteral(((long) (tmp33) ), ((global::Loreline.Runtime.Position) (( (( tmp35 != null )) ? (tmp35) : (this.currentPos()) )) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
								}
								
							}
							
						}
						
					}
					
					if (prevIsDot) {
						this.addError(new global::Loreline.Runtime.ParseError(((string) ("Trailing dot in field access") ), ((global::Loreline.Runtime.Position) (((global::Loreline.Runtime.Token) (tokens[( tokens.length - 1 )]) ).pos) )));
					}
					
					expr = target;
				}
				else {
					global::Loreline.Runtime.Parser tempParser2 = new global::Loreline.Runtime.Parser(((global::Loreline.Internal.Root.Array<object>) (tokens) ));
					tempParser2.currentNodeId = this.currentNodeId;
					expr = tempParser2.parseExpression();
					this.currentNodeId = tempParser2.currentNodeId;
					if ( ! (tempParser2.isAtEnd()) ) {
						this.addError(new global::Loreline.Runtime.ParseError(((string) ("Unexpected tokens after interpolation expression") ), ((global::Loreline.Runtime.Position) (((global::Loreline.Runtime.Token) (tempParser2.tokens[tempParser2.current]) ).pos) )));
					}
					
				}
				
				global::Loreline.Runtime.Position partPos = new global::Loreline.Runtime.Position(((int) (pos.line) ), ((int) (( pos.column + (( (braces) ? (1) : (0) )) )) ), ((int) (( pos.offset - (( (braces) ? (2) : (0) )) )) ), new global::Loreline.Internal.Lang.Null<int>(length, true));
				return new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Expr(expr)) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
			}
		}
		
		
		public virtual global::Loreline.Runtime.NStringPart parseStringTag(bool closing, int start, int length, string content, int quotes, global::Loreline.Internal.Root.Array<object> attachments) {
			unchecked {
				global::Loreline.Runtime.Position pos = this.makeStringPartPosition(this.currentPos(), content, start);
				pos.length = length;
				if (( quotes != ((int) (0) ) )) {
					pos = pos.withOffset(content, 1, new global::Loreline.Internal.Lang.Null<int>(pos.length, true));
				}
				
				int offsetStart = ( (closing) ? (2) : (1) );
				int innerStart = ( start + offsetStart );
				int innerLength = ( length - (( (closing) ? (3) : (2) )) );
				int innerEnd = ( innerStart + innerLength );
				long tagId = this.nextNodeId(((int) (4) ));
				bool hasAttachmentsInRange = false;
				if (( attachments != null )) {
					int _g = 0;
					int _g1 = attachments.length;
					while (( _g < _g1 )) {
						int i = _g++;
						{
							global::Loreline.Runtime.LStringAttachment _g2 = ((global::Loreline.Runtime.LStringAttachment) (attachments[i]) );
							switch (_g2._hx_index) {
								case 0:
								{
									bool _g3 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Interpolation ).braces;
									bool _g4 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Interpolation ).inTag;
									global::Loreline.Internal.Root.Array<object> _g5 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Interpolation ).expr;
									{
										int aStart = ( _g2 as global::Loreline.Runtime.LStringAttachment_Interpolation ).start;
										int aLength = ( _g2 as global::Loreline.Runtime.LStringAttachment_Interpolation ).length;
										{
											int aEnd = ( aStart + aLength );
											if (( ( aStart >= innerStart ) && ( aEnd <= innerEnd ) )) {
												hasAttachmentsInRange = true;
												goto label1;
											}
											
										}
										
									}
									
									break;
								}
								
								
								case 1:
								{
									bool _g6 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Tag ).closing;
									int _g7 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Tag ).start;
									int _g8 = ( _g2 as global::Loreline.Runtime.LStringAttachment_Tag ).length;
									continue;
								}
								
								
							}
							
						}
						
					}
					label1: {};
				}
				
				if ( ! (hasAttachmentsInRange) ) {
					global::Loreline.Runtime.Position partPos = this.makeStringPartPosition(pos, content, innerStart);
					partPos.length = innerLength;
					long literalId = this.nextNodeId(((int) (4) ));
					long partId = this.nextNodeId(((int) (4) ));
					return new global::Loreline.Runtime.NStringPart(((long) (tagId) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Tag(closing, ((global::Loreline.Runtime.NStringLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NStringLiteral(((long) (literalId) ), ((global::Loreline.Runtime.Position) (partPos) ), ((int) (0) ), ((global::Loreline.Internal.Root.Array<object>) (new global::Loreline.Internal.Root.Array<object>(new object[]{new global::Loreline.Runtime.NStringPart(((long) (partId) ), ((global::Loreline.Runtime.Position) (partPos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, innerStart, new global::Loreline.Internal.Lang.Null<int>(innerLength, true)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))})) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) ))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				}
				
				global::Loreline.Internal.Root.Array<object> parts = new global::Loreline.Internal.Root.Array<object>();
				global::Loreline.Runtime.NStringLiteral stringLiteral = ((global::Loreline.Runtime.NStringLiteral) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NStringLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (pos) ), ((int) (0) ), ((global::Loreline.Internal.Root.Array<object>) (parts) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
				int currentPos = innerStart;
				if (( attachments != null )) {
					int _g9 = 0;
					int _g10 = attachments.length;
					while (( _g9 < _g10 )) {
						int i1 = _g9++;
						{
							global::Loreline.Runtime.LStringAttachment _g11 = ((global::Loreline.Runtime.LStringAttachment) (attachments[i1]) );
							switch (_g11._hx_index) {
								case 0:
								{
									bool _g12 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Interpolation ).inTag;
									{
										bool braces = ( _g11 as global::Loreline.Runtime.LStringAttachment_Interpolation ).braces;
										global::Loreline.Internal.Root.Array<object> tokens = ( _g11 as global::Loreline.Runtime.LStringAttachment_Interpolation ).expr;
										int aStart1 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Interpolation ).start;
										int aLength1 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Interpolation ).length;
										{
											int aEnd1 = ( aStart1 + aLength1 );
											if (( ( aStart1 >= innerStart ) && ( aEnd1 <= innerEnd ) )) {
												if (( aStart1 > currentPos )) {
													global::Loreline.Internal.Lang.Null<int> len = default(global::Loreline.Internal.Lang.Null<int>);
													global::Loreline.Runtime.Position partPos1 = this.makeStringPartPosition(pos, global::Loreline.Internal.Lang.StringExt.substr(content, start, len), ( ( currentPos - start ) + offsetStart ));
													partPos1.length = ( aStart1 - currentPos );
													parts.push(new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos1) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, currentPos, new global::Loreline.Internal.Lang.Null<int>(( aStart1 - currentPos ), true)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
												}
												
												parts.push(this.parseStringInterpolation(braces, true, tokens, aStart1, aLength1, content));
												currentPos = aEnd1;
											}
											
										}
										
									}
									
									break;
								}
								
								
								case 1:
								{
									bool _g13 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Tag ).closing;
									int _g14 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Tag ).start;
									int _g15 = ( _g11 as global::Loreline.Runtime.LStringAttachment_Tag ).length;
									continue;
								}
								
								
							}
							
						}
						
					}
					
				}
				
				if (( currentPos < innerEnd )) {
					global::Loreline.Internal.Lang.Null<int> len1 = default(global::Loreline.Internal.Lang.Null<int>);
					global::Loreline.Runtime.Position partPos2 = this.makeStringPartPosition(pos, global::Loreline.Internal.Lang.StringExt.substr(content, start, len1), ( ( currentPos - start ) + offsetStart ));
					partPos2.length = ( ( innerStart + innerEnd ) - currentPos );
					parts.push(new global::Loreline.Runtime.NStringPart(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (partPos2) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Raw(global::Loreline.Internal.Lang.StringExt.substr(content, currentPos, new global::Loreline.Internal.Lang.Null<int>(( innerEnd - currentPos ), true)))) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>)));
				}
				
				return new global::Loreline.Runtime.NStringPart(((long) (tagId) ), ((global::Loreline.Runtime.Position) (pos) ), ((global::Loreline.Runtime.StringPartType) (global::Loreline.Runtime.StringPartType.Tag(closing, stringLiteral)) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseIdentifierExpression(global::Loreline.Runtime.Position startPos, string name) {
			unchecked {
				global::Loreline.Runtime.NExpr expr = ((global::Loreline.Runtime.NAccess) (this.attachComments<object>(((object) (this.makeAccess(startPos, null, name, null)) ))) );
				while (true) {
					if (this.match(global::Loreline.Runtime.TokenType.Dot, new global::Loreline.Internal.Lang.Null<bool>(false, true))) {
						string prop = null;
						global::Loreline.Runtime.Position propPos = this.currentPos();
						if (this.checkIdentifier()) {
							prop = this.expectIdentifier();
						}
						else {
							this.addError(new global::Loreline.Runtime.ParseError(((string) ("Expected identifier after \'.\'") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )));
							prop = "";
						}
						
						expr = ((global::Loreline.Runtime.NAccess) (this.attachComments<object>(((object) (this.makeAccess(startPos, expr, prop, propPos)) ))) );
					}
					else if (this.match(global::Loreline.Runtime.TokenType.LBracket, default(global::Loreline.Internal.Lang.Null<bool>))) {
						global::Loreline.Runtime.NExpr index = this.parseExpression();
						this.expect(global::Loreline.Runtime.TokenType.RBracket);
						global::Loreline.Runtime.Position accessPos = startPos.extendedTo(this.previous().pos);
						expr = ((global::Loreline.Runtime.NArrayAccess) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NArrayAccess(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (accessPos) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Runtime.NExpr) (index) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					else if (this.match(global::Loreline.Runtime.TokenType.LParen, default(global::Loreline.Internal.Lang.Null<bool>))) {
						global::Loreline.Internal.Root.Array<object> args = this.parseCallArguments();
						expr = ((global::Loreline.Runtime.NCall) (this.attachComments<object>(((object) (new global::Loreline.Runtime.NCall(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos.extendedTo(this.previous().pos)) ), ((global::Loreline.Runtime.NExpr) (expr) ), ((global::Loreline.Internal.Root.Array<object>) (args) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>))) ))) );
					}
					else {
						break;
					}
					
				}
				
				return expr;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseArrayLiteral() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Internal.Root.Array<object> elements = new global::Loreline.Internal.Root.Array<object>(new object[]{});
				global::Loreline.Runtime.NLiteral literal = new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (startPos) ), ((object) (elements) ), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Array) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				this.expect(global::Loreline.Runtime.TokenType.LBracket);
				global::Loreline.Runtime.NLiteral __temp_expr1 = ((global::Loreline.Runtime.NLiteral) (this.attachComments<object>(((object) (literal) ))) );
				bool needsSeparator = false;
				while ((  ! (this.check(global::Loreline.Runtime.TokenType.RBracket))  &&  ! (this.isAtEnd())  )) {
					if (needsSeparator) {
						while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
							needsSeparator = false;
						}
						
						if (this.match(global::Loreline.Runtime.TokenType.Comma, default(global::Loreline.Internal.Lang.Null<bool>))) {
							needsSeparator = false;
						}
						
					}
					
					while (( ( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.Indent, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
						needsSeparator = false;
					}
					
					if ((  ! (this.check(global::Loreline.Runtime.TokenType.RBracket))  && needsSeparator )) {
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Expected comma or line break between elements") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
					}
					
					while (( ( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.Indent, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
					}
					
					if ( ! (this.check(global::Loreline.Runtime.TokenType.RBracket)) ) {
						elements.push(this.parseExpression());
					}
					
					global::Loreline.Runtime.Token prev = this.previous();
					needsSeparator = ( ( prev.type != global::Loreline.Runtime.TokenType.Colon ) && ( prev.type != global::Loreline.Runtime.TokenType.LineBreak ) );
				}
				
				while (( ( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || this.match(global::Loreline.Runtime.TokenType.Indent, default(global::Loreline.Internal.Lang.Null<bool>)) ) || this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) )) {
				}
				
				this.expect(global::Loreline.Runtime.TokenType.RBracket);
				literal.pos = literal.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return literal;
			}
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseObjectLiteral() {
			unchecked {
				global::Loreline.Runtime.Position startPos = this.currentPos();
				global::Loreline.Internal.Root.Array<object> fields = new global::Loreline.Internal.Root.Array<object>(new object[]{});
				global::Loreline.Runtime.TokenType blockEnd = ( (( this.parseBlockStart().type == global::Loreline.Runtime.TokenType.Indent )) ? (global::Loreline.Runtime.TokenType.Unindent) : (global::Loreline.Runtime.TokenType.RBrace) );
				int style = ( (( blockEnd == global::Loreline.Runtime.TokenType.RBrace )) ? (((int) (1) )) : (((int) (0) )) );
				global::Loreline.Runtime.NLiteral literal = new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (( (( blockEnd != global::Loreline.Runtime.TokenType.RBrace )) ? (this.nextNonWhitespaceOrComment().pos) : (startPos) )) ), ((object) (fields) ), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Object(style)) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
				global::Loreline.Runtime.NLiteral __temp_expr1 = ((global::Loreline.Runtime.NLiteral) (this.attachComments<object>(((object) (literal) ))) );
				bool needsSeparator = false;
				while ((  ! (this.check(blockEnd))  &&  ! (this.isAtEnd())  )) {
					if (needsSeparator) {
						while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
							needsSeparator = false;
						}
						
						if (this.match(global::Loreline.Runtime.TokenType.Comma, default(global::Loreline.Internal.Lang.Null<bool>))) {
							needsSeparator = false;
						}
						
					}
					
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
						needsSeparator = false;
					}
					
					if ((  ! (this.check(blockEnd))  && needsSeparator )) {
						throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) ("Expected comma or line break between fields") ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
					}
					
					while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
					}
					
					if ( ! (this.check(blockEnd)) ) {
						fields.push(this.parseObjectField());
					}
					
					global::Loreline.Runtime.Token prev = this.previous();
					needsSeparator = ( ( prev.type != global::Loreline.Runtime.TokenType.Colon ) && ( prev.type != global::Loreline.Runtime.TokenType.LineBreak ) );
				}
				
				while (( this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>)) || ( ( blockEnd != global::Loreline.Runtime.TokenType.Unindent ) && this.match(global::Loreline.Runtime.TokenType.Unindent, default(global::Loreline.Internal.Lang.Null<bool>)) ) )) {
				}
				
				this.expect(blockEnd);
				literal.pos = literal.pos.extendedTo(this.prevNonWhitespaceOrComment().pos);
				return literal;
			}
		}
		
		
		public virtual global::Loreline.Internal.Root.Array<object> parseCallArguments() {
			global::Loreline.Internal.Root.Array<object> args = new global::Loreline.Internal.Root.Array<object>(new object[]{});
			if ( ! (this.check(global::Loreline.Runtime.TokenType.RParen)) ) {
				do {
					while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
					}
					
					args.push(this.parseExpression());
					while (this.match(global::Loreline.Runtime.TokenType.LineBreak, default(global::Loreline.Internal.Lang.Null<bool>))) {
					}
					
				}
				while (this.match(global::Loreline.Runtime.TokenType.Comma, default(global::Loreline.Internal.Lang.Null<bool>)));
			}
			
			this.expect(global::Loreline.Runtime.TokenType.RParen);
			return args;
		}
		
		
		public virtual global::Loreline.Runtime.NExpr parseConditionExpression() {
			unchecked {
				bool hasParen = this.match(global::Loreline.Runtime.TokenType.LParen, default(global::Loreline.Internal.Lang.Null<bool>));
				global::Loreline.Runtime.NExpr expr = null;
				try {
					expr = this.parseExpression();
				}
				catch (global::System.Exception _g){
					object _g1 = global::Loreline.Internal.Exception.caught(_g).unwrap();
					if (( _g1 is global::Loreline.Runtime.ParseError )) {
						global::Loreline.Runtime.ParseError e = ((global::Loreline.Runtime.ParseError) (_g1) );
						{
							this.addError(e);
							expr = new global::Loreline.Runtime.NLiteral(((long) (this.nextNodeId(((int) (4) ))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ), default(object), ((global::Loreline.Runtime.LiteralType) (global::Loreline.Runtime.LiteralType.Null) ), default(global::Loreline.Internal.Root.Array<object>), default(global::Loreline.Internal.Root.Array<object>));
						}
						
					}
					else {
						throw;
					}
					
				}
				
				
				if (hasParen) {
					this.expect(global::Loreline.Runtime.TokenType.RParen);
				}
				
				return expr;
			}
		}
		
		
		public virtual bool match(global::Loreline.Runtime.TokenType type, global::Loreline.Internal.Lang.Null<bool> advanceLineBreaks) {
			bool advanceLineBreaks1 = ( ( ! (advanceLineBreaks.hasValue) ) ? (true) : ((advanceLineBreaks).@value) );
			if (this.check(type)) {
				this.advance(new global::Loreline.Internal.Lang.Null<bool>(advanceLineBreaks1, true));
				return true;
			}
			
			return false;
		}
		
		
		public virtual bool isAtLineBreak() {
			if ( ! (this.lineBreakAfterToken) ) {
				return ( ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type == global::Loreline.Runtime.TokenType.LineBreak );
			}
			else {
				return true;
			}
			
		}
		
		
		public virtual global::Loreline.Runtime.Token expect(global::Loreline.Runtime.TokenType type) {
			unchecked {
				if (this.check(type)) {
					return this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
				}
				else {
					global::Loreline.Runtime.ParseError error = new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat(global::Loreline.Internal.Lang.Runtime.concat("Expected ", global::Loreline.Internal.Root.Std.@string(type)), ", got "), (( (this.isAtEnd()) ? ("EoF") : (global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type)) )))) ), ((global::Loreline.Runtime.Position) (((global::Loreline.Runtime.Token) (this.tokens[((int) (global::System.Math.Min(((double) (this.current) ), ((double) (( this.tokens.length - 1 )) ))) )]) ).pos) ));
					switch (type._hx_index) {
						case 37:
						case 39:
						case 45:
						{
							this.addError(error);
							return new global::Loreline.Runtime.Token(((global::Loreline.Runtime.TokenType) (type) ), ((global::Loreline.Runtime.Position) (this.currentPos()) ));
						}
						
						
						default:
						{
							break;
						}
						
					}
					
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(error)) );
				}
				
			}
		}
		
		
		public virtual bool checkIdentifier() {
			unchecked {
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				if (( _g._hx_index == 12 )) {
					string name = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
					return true;
				}
				else {
					return false;
				}
				
			}
		}
		
		
		public virtual string expectIdentifier() {
			unchecked {
				global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
				if (( _g._hx_index == 12 )) {
					string name = ( _g as global::Loreline.Runtime.TokenType_Identifier ).name;
					this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
					return name;
				}
				else {
					throw ((global::System.Exception) (global::Loreline.Internal.Exception.thrown(new global::Loreline.Runtime.ParseError(((string) (global::Loreline.Internal.Lang.Runtime.concat("Expected identifier, got ", global::Loreline.Internal.Root.Std.@string(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type))) ), ((global::Loreline.Runtime.Position) (this.currentPos()) )))) );
				}
				
			}
		}
		
		
		public virtual T attachComments<T>(T node) {
			if (( ( this.pendingComments == null ) || ( this.pendingComments.length == 0 ) )) {
				return node;
			}
			
			global::Loreline.Runtime.Position nodeStart = ((global::Loreline.Runtime.AstNode) (((object) (node) )) ).pos;
			global::Loreline.Internal.Root.Array<object> remainingComments = null;
			{
				int _g = 0;
				int _g1 = this.pendingComments.length;
				while (( _g < _g1 )) {
					int i = _g++;
					global::Loreline.Runtime.Comment comment = ((global::Loreline.Runtime.Comment) (this.pendingComments[i]) );
					if (( comment.pos.line < nodeStart.line )) {
						if (( ((global::Loreline.Runtime.AstNode) (((object) (node) )) ).leadingComments == null )) {
							global::Loreline.Internal.Root.Array<object> __temp_expr2 = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (global::Loreline.Internal.Lang.Runtime.setField(node, "leadingComments", 977714714, new global::Loreline.Internal.Root.Array<object>(new object[]{}))) ))) );
						}
						
						((global::Loreline.Runtime.AstNode) (((object) (node) )) ).leadingComments.push(comment);
					}
					else if (( comment.pos.line == nodeStart.line )) {
						if (( ((global::Loreline.Runtime.AstNode) (((object) (node) )) ).trailingComments == null )) {
							global::Loreline.Internal.Root.Array<object> __temp_expr1 = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (global::Loreline.Internal.Lang.Runtime.setField(node, "trailingComments", 726215216, new global::Loreline.Internal.Root.Array<object>(new object[]{}))) ))) );
						}
						
						((global::Loreline.Runtime.AstNode) (((object) (node) )) ).trailingComments.push(comment);
					}
					else {
						if (( remainingComments == null )) {
							remainingComments = new global::Loreline.Internal.Root.Array<object>(new object[]{});
						}
						
						remainingComments.push(comment);
					}
					
				}
				
			}
			
			this.pendingComments = remainingComments;
			return node;
		}
		
		
		public virtual T attachElseComments<T>(T node, global::Loreline.Runtime.Token elseToken) {
			if (( this.pendingComments != null )) {
				global::Loreline.Runtime.Position nodeStart = elseToken.pos;
				global::Loreline.Internal.Root.Array<object> remainingComments = new global::Loreline.Internal.Root.Array<object>(new object[]{});
				{
					int _g = 0;
					global::Loreline.Internal.Root.Array<object> _g1 = this.pendingComments;
					while (( _g < _g1.length )) {
						global::Loreline.Runtime.Comment comment = ((global::Loreline.Runtime.Comment) (_g1[_g]) );
						 ++ _g;
						if (( comment.pos.line < nodeStart.line )) {
							if (( ((global::Loreline.Runtime.NIfStatement) (((object) (node) )) ).elseLeadingComments == null )) {
								global::Loreline.Internal.Root.Array<object> __temp_expr2 = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (global::Loreline.Internal.Lang.Runtime.setField(node, "elseLeadingComments", 1152129377, new global::Loreline.Internal.Root.Array<object>(new object[]{}))) ))) );
							}
							
							((global::Loreline.Runtime.NIfStatement) (((object) (node) )) ).elseLeadingComments.push(comment);
						}
						else if (( comment.pos.line == nodeStart.line )) {
							if (( ((global::Loreline.Runtime.NIfStatement) (((object) (node) )) ).elseTrailingComments == null )) {
								global::Loreline.Internal.Root.Array<object> __temp_expr1 = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (global::Loreline.Internal.Lang.Runtime.setField(node, "elseTrailingComments", 965979401, new global::Loreline.Internal.Root.Array<object>(new object[]{}))) ))) );
							}
							
							((global::Loreline.Runtime.NIfStatement) (((object) (node) )) ).elseTrailingComments.push(comment);
						}
						else {
							remainingComments.push(comment);
						}
						
					}
					
				}
				
				this.pendingComments = remainingComments;
			}
			
			return node;
		}
		
		
		public virtual void synchronize() {
			unchecked {
				this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
				while ( ! (this.isAtEnd()) ) {
					global::Loreline.Runtime.TokenType _g = ((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type;
					switch (_g._hx_index) {
						case 8:
						{
							int _g1 = ( _g as global::Loreline.Runtime.TokenType_LString ).quotes;
							string _g2 = ( _g as global::Loreline.Runtime.TokenType_LString ).s;
							global::Loreline.Internal.Root.Array<object> _g3 = ( _g as global::Loreline.Runtime.TokenType_LString ).attachments;
							{
								if (( this.previous().type == global::Loreline.Runtime.TokenType.RBrace )) {
									return;
								}
								
								this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							}
							
							break;
						}
						
						
						case 32:
						{
							this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							if (( this.check(global::Loreline.Runtime.TokenType.Dot) || global::Loreline.Runtime.TokenTypeHelpers.isIdentifier(((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type) )) {
								this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							}
							
							return;
						}
						
						
						case 1:
						case 2:
						case 3:
						case 4:
						case 5:
						case 37:
						case 44:
						{
							return;
						}
						
						
						default:
						{
							this.advance(default(global::Loreline.Internal.Lang.Null<bool>));
							break;
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual bool requiresNewLine() {
			unchecked {
				switch (((global::Loreline.Runtime.Token) (this.tokens[this.current]) ).type._hx_index) {
					case 6:
					case 32:
					case 37:
					{
						return false;
					}
					
					
					default:
					{
						return true;
					}
					
				}
				
			}
		}
		
		
		public virtual global::Loreline.Runtime.ParseError addError(global::Loreline.Runtime.ParseError error) {
			if (( this.errors == null )) {
				this.errors = new global::Loreline.Internal.Root.Array<object>(new object[]{});
			}
			
			if ( ! (this.errors.contains(error)) ) {
				this.errors.push(error);
			}
			
			return error;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1273207865:
					{
						this.current = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1481290936:
					{
						this.rootBeat = ((global::Loreline.Runtime.NBeatDecl) (@value) );
						return @value;
					}
					
					
					case 176082838:
					{
						this.currentNodeId = ((long) (@value) );
						return @value;
					}
					
					
					case 1522079560:
					{
						this.lineBreakAfterToken = global::Loreline.Internal.Lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 2116027125:
					{
						this.lastLineBreak = ((global::Loreline.Runtime.Position) (@value) );
						return @value;
					}
					
					
					case 214869720:
					{
						this.lastTokenEnd = ((global::Loreline.Runtime.Position) (@value) );
						return @value;
					}
					
					
					case 419142827:
					{
						this.pendingComments = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (@value) ))) );
						return @value;
					}
					
					
					case 1365803947:
					{
						this.errors = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (@value) ))) );
						return @value;
					}
					
					
					case 1273207865:
					{
						this.current = ((int) (global::Loreline.Internal.Lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 300357466:
					{
						this.tokens = ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (@value) ))) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1820783079:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "addError", 1820783079)) );
					}
					
					
					case 687834278:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "requiresNewLine", 687834278)) );
					}
					
					
					case 893479760:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "synchronize", 893479760)) );
					}
					
					
					case 1854502514:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "attachElseComments", 1854502514)) );
					}
					
					
					case 661986841:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "attachComments", 661986841)) );
					}
					
					
					case 862380962:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "expectIdentifier", 862380962)) );
					}
					
					
					case 1199976273:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "checkIdentifier", 1199976273)) );
					}
					
					
					case 1148579289:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "expect", 1148579289)) );
					}
					
					
					case 551767278:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "isAtLineBreak", 551767278)) );
					}
					
					
					case 52644165:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "match", 52644165)) );
					}
					
					
					case 1650123424:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseConditionExpression", 1650123424)) );
					}
					
					
					case 1368088229:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseCallArguments", 1368088229)) );
					}
					
					
					case 1673827389:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseObjectLiteral", 1673827389)) );
					}
					
					
					case 575935913:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseArrayLiteral", 575935913)) );
					}
					
					
					case 1234125620:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseIdentifierExpression", 1234125620)) );
					}
					
					
					case 199209814:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseStringTag", 199209814)) );
					}
					
					
					case 456957216:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseStringInterpolation", 456957216)) );
					}
					
					
					case 1557555762:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "makeAccess", 1557555762)) );
					}
					
					
					case 1061701563:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "makeStringPartPosition", 1061701563)) );
					}
					
					
					case 1260990571:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseStringLiteral", 1260990571)) );
					}
					
					
					case 1565955023:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parsePrimary", 1565955023)) );
					}
					
					
					case 1354931324:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseUnary", 1354931324)) );
					}
					
					
					case 1688695337:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseMultiplicative", 1688695337)) );
					}
					
					
					case 1835969119:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseAdditive", 1835969119)) );
					}
					
					
					case 1783401820:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseComparison", 1783401820)) );
					}
					
					
					case 442647117:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseEquality", 442647117)) );
					}
					
					
					case 929195681:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseLogicalAnd", 929195681)) );
					}
					
					
					case 110099609:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseLogicalOr", 110099609)) );
					}
					
					
					case 126419883:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseExpression", 126419883)) );
					}
					
					
					case 832143272:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseTransition", 832143272)) );
					}
					
					
					case 1319769887:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseIfStatement", 1319769887)) );
					}
					
					
					case 1958679431:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "isKnownNodeStart", 1958679431)) );
					}
					
					
					case 1920411396:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseExpressionStatement", 1920411396)) );
					}
					
					
					case 1892331232:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "isExpressionStart", 1892331232)) );
					}
					
					
					case 1880302217:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseChoiceOption", 1880302217)) );
					}
					
					
					case 799206811:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseChoiceStatement", 799206811)) );
					}
					
					
					case 1487047055:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseTextStatement", 1487047055)) );
					}
					
					
					case 473644160:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseCharacterDecl", 473644160)) );
					}
					
					
					case 878250472:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseBlockStart", 878250472)) );
					}
					
					
					case 1422425789:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "checkBlockStart", 1422425789)) );
					}
					
					
					case 1389332563:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseBeatDecl", 1389332563)) );
					}
					
					
					case 1670156296:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseObjectField", 1670156296)) );
					}
					
					
					case 1764687976:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseStateDecl", 1764687976)) );
					}
					
					
					case 245971505:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseStatementBlock", 245971505)) );
					}
					
					
					case 986361412:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseDialogueStatement", 986361412)) );
					}
					
					
					case 62868984:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseImport", 62868984)) );
					}
					
					
					case 68474919:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "wrapInRootBeat", 68474919)) );
					}
					
					
					case 1353735125:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parseNode", 1353735125)) );
					}
					
					
					case 91158421:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "isComment", 91158421)) );
					}
					
					
					case 1128621150:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "isAtEnd", 1128621150)) );
					}
					
					
					case 1933704121:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "checkString", 1933704121)) );
					}
					
					
					case 1169594568:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "check", 1169594568)) );
					}
					
					
					case 1194336987:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "currentPos", 1194336987)) );
					}
					
					
					case 1637015115:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "nextNonLineBreakOrComment", 1637015115)) );
					}
					
					
					case 914499717:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "nextNonWhitespaceOrComment", 914499717)) );
					}
					
					
					case 509207173:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "prevNonWhitespaceOrComment", 509207173)) );
					}
					
					
					case 1467341116:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "prevIdentifier", 1467341116)) );
					}
					
					
					case 953824755:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "prevWithType", 953824755)) );
					}
					
					
					case 598785079:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "previous", 598785079)) );
					}
					
					
					case 1863059586:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "advance", 1863059586)) );
					}
					
					
					case 1247076763:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "peek", 1247076763)) );
					}
					
					
					case 1549008848:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "nextNodeId", 1549008848)) );
					}
					
					
					case 1304366305:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "getErrors", 1304366305)) );
					}
					
					
					case 1029017651:
					{
						return ((global::Loreline.Internal.Lang.Function) (new global::Loreline.Internal.Lang.Closure(this, "parse", 1029017651)) );
					}
					
					
					case 1481290936:
					{
						return this.rootBeat;
					}
					
					
					case 176082838:
					{
						return this.currentNodeId;
					}
					
					
					case 1522079560:
					{
						return this.lineBreakAfterToken;
					}
					
					
					case 2116027125:
					{
						return this.lastLineBreak;
					}
					
					
					case 214869720:
					{
						return this.lastTokenEnd;
					}
					
					
					case 419142827:
					{
						return this.pendingComments;
					}
					
					
					case 1365803947:
					{
						return this.errors;
					}
					
					
					case 1273207865:
					{
						return this.current;
					}
					
					
					case 300357466:
					{
						return this.tokens;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1273207865:
					{
						return ((double) (this.current) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1820783079:
					{
						return this.addError(((global::Loreline.Runtime.ParseError) (dynargs[0]) ));
					}
					
					
					case 687834278:
					{
						return this.requiresNewLine();
					}
					
					
					case 893479760:
					{
						this.synchronize();
						break;
					}
					
					
					case 1854502514:
					{
						return this.attachElseComments<object>(((object) (dynargs[0]) ), ((global::Loreline.Runtime.Token) (dynargs[1]) ));
					}
					
					
					case 661986841:
					{
						return this.attachComments<object>(((object) (dynargs[0]) ));
					}
					
					
					case 862380962:
					{
						return this.expectIdentifier();
					}
					
					
					case 1199976273:
					{
						return this.checkIdentifier();
					}
					
					
					case 1148579289:
					{
						return this.expect(((global::Loreline.Runtime.TokenType) (dynargs[0]) ));
					}
					
					
					case 551767278:
					{
						return this.isAtLineBreak();
					}
					
					
					case 52644165:
					{
						return this.match(((global::Loreline.Runtime.TokenType) (dynargs[0]) ), global::Loreline.Internal.Lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
					}
					
					
					case 1650123424:
					{
						return this.parseConditionExpression();
					}
					
					
					case 1368088229:
					{
						return this.parseCallArguments();
					}
					
					
					case 1673827389:
					{
						return this.parseObjectLiteral();
					}
					
					
					case 575935913:
					{
						return this.parseArrayLiteral();
					}
					
					
					case 1234125620:
					{
						return this.parseIdentifierExpression(((global::Loreline.Runtime.Position) (dynargs[0]) ), global::Loreline.Internal.Lang.Runtime.toString(dynargs[1]));
					}
					
					
					case 199209814:
					{
						return this.parseStringTag(global::Loreline.Internal.Lang.Runtime.toBool(dynargs[0]), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[1])) ), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[2])) ), global::Loreline.Internal.Lang.Runtime.toString(dynargs[3]), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[4])) ), ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (dynargs[5]) ))) ));
					}
					
					
					case 456957216:
					{
						return this.parseStringInterpolation(global::Loreline.Internal.Lang.Runtime.toBool(dynargs[0]), global::Loreline.Internal.Lang.Runtime.toBool(dynargs[1]), ((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (dynargs[2]) ))) ), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[3])) ), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[4])) ), global::Loreline.Internal.Lang.Runtime.toString(dynargs[5]));
					}
					
					
					case 1557555762:
					{
						return this.makeAccess(((global::Loreline.Runtime.Position) (dynargs[0]) ), ((global::Loreline.Runtime.NExpr) (dynargs[1]) ), global::Loreline.Internal.Lang.Runtime.toString(dynargs[2]), ((global::Loreline.Runtime.Position) (dynargs[3]) ));
					}
					
					
					case 1061701563:
					{
						return this.makeStringPartPosition(((global::Loreline.Runtime.Position) (dynargs[0]) ), global::Loreline.Internal.Lang.Runtime.toString(dynargs[1]), ((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[2])) ));
					}
					
					
					case 1260990571:
					{
						return this.parseStringLiteral();
					}
					
					
					case 1565955023:
					{
						return this.parsePrimary();
					}
					
					
					case 1354931324:
					{
						return this.parseUnary();
					}
					
					
					case 1688695337:
					{
						return this.parseMultiplicative();
					}
					
					
					case 1835969119:
					{
						return this.parseAdditive();
					}
					
					
					case 1783401820:
					{
						return this.parseComparison();
					}
					
					
					case 442647117:
					{
						return this.parseEquality();
					}
					
					
					case 929195681:
					{
						return this.parseLogicalAnd();
					}
					
					
					case 110099609:
					{
						return this.parseLogicalOr();
					}
					
					
					case 126419883:
					{
						return this.parseExpression();
					}
					
					
					case 832143272:
					{
						return this.parseTransition();
					}
					
					
					case 1319769887:
					{
						return this.parseIfStatement();
					}
					
					
					case 1958679431:
					{
						return this.isKnownNodeStart();
					}
					
					
					case 1920411396:
					{
						return this.parseExpressionStatement();
					}
					
					
					case 1892331232:
					{
						return this.isExpressionStart();
					}
					
					
					case 1880302217:
					{
						return this.parseChoiceOption(((global::Loreline.Runtime.TokenType) (dynargs[0]) ));
					}
					
					
					case 799206811:
					{
						return this.parseChoiceStatement();
					}
					
					
					case 1487047055:
					{
						return this.parseTextStatement();
					}
					
					
					case 473644160:
					{
						return this.parseCharacterDecl();
					}
					
					
					case 878250472:
					{
						return this.parseBlockStart();
					}
					
					
					case 1422425789:
					{
						return this.checkBlockStart();
					}
					
					
					case 1389332563:
					{
						return this.parseBeatDecl();
					}
					
					
					case 1670156296:
					{
						return this.parseObjectField();
					}
					
					
					case 1764687976:
					{
						return this.parseStateDecl(global::Loreline.Internal.Lang.Runtime.toBool(dynargs[0]));
					}
					
					
					case 245971505:
					{
						return this.parseStatementBlock(((global::Loreline.Internal.Root.Array<object>) (global::Loreline.Internal.Root.Array<object>.__hx_cast<object>(((global::Loreline.Internal.Root.Array) (dynargs[0]) ))) ));
					}
					
					
					case 986361412:
					{
						return this.parseDialogueStatement();
					}
					
					
					case 62868984:
					{
						return this.parseImport();
					}
					
					
					case 68474919:
					{
						return this.wrapInRootBeat(((global::Loreline.Runtime.AstNode) (dynargs[0]) ));
					}
					
					
					case 1353735125:
					{
						return this.parseNode(global::Loreline.Internal.Lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )));
					}
					
					
					case 91158421:
					{
						return this.isComment(((global::Loreline.Runtime.TokenType) (dynargs[0]) ));
					}
					
					
					case 1128621150:
					{
						return this.isAtEnd();
					}
					
					
					case 1933704121:
					{
						return this.checkString();
					}
					
					
					case 1169594568:
					{
						return this.check(((global::Loreline.Runtime.TokenType) (dynargs[0]) ));
					}
					
					
					case 1194336987:
					{
						return this.currentPos();
					}
					
					
					case 1637015115:
					{
						return this.nextNonLineBreakOrComment();
					}
					
					
					case 914499717:
					{
						return this.nextNonWhitespaceOrComment();
					}
					
					
					case 509207173:
					{
						return this.prevNonWhitespaceOrComment();
					}
					
					
					case 1467341116:
					{
						return this.prevIdentifier();
					}
					
					
					case 953824755:
					{
						return this.prevWithType(((global::Loreline.Runtime.TokenType) (dynargs[0]) ));
					}
					
					
					case 598785079:
					{
						return this.previous();
					}
					
					
					case 1863059586:
					{
						return this.advance(global::Loreline.Internal.Lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )));
					}
					
					
					case 1247076763:
					{
						return this.peek();
					}
					
					
					case 1549008848:
					{
						return this.nextNodeId(((int) (global::Loreline.Internal.Lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 1304366305:
					{
						return this.getErrors();
					}
					
					
					case 1029017651:
					{
						return this.parse();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Loreline.Internal.Root.Array<string> baseArr) {
			baseArr.push("rootBeat");
			baseArr.push("currentNodeId");
			baseArr.push("lineBreakAfterToken");
			baseArr.push("lastLineBreak");
			baseArr.push("lastTokenEnd");
			baseArr.push("pendingComments");
			baseArr.push("errors");
			baseArr.push("current");
			baseArr.push("tokens");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



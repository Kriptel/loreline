name: Build loreline
on:
  push:
    branches:
      - '**'
    tags:
      - v**
jobs:

  build-loreline-windows:
    runs-on: windows-2022
    steps:

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Haxe
        working-directory: .
        run: |
          $NEKOPATH = $(Convert-Path .)+'/git/haxe-binary/windows/neko'
          $HAXEPATH = $(Convert-Path .)+'/git/haxe-binary/windows/haxe'
          echo $NEKOPATH >> $GITHUB_PATH
          echo $HAXEPATH >> $GITHUB_PATH
          echo $NEKOPATH
          echo $HAXEPATH

      - name: Build loreline
        working-directory: .
        run: |
          node ./install --cpp

      - name: Run loreline
        working-directory: .
        run: |
          ./loreline

      - name: Check loreline version
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: .
        run: |
          $GIT_TAG = $($env:GITHUB_REF).replace("refs/tags/", "")
          ./loreline version --check-tag $GIT_TAG

      - name: Run unit tests
        working-directory: .
        run: |
          ./loreline test ./test

      - name: Create zip archive
        working-directory: .
        run: |
          $ZIP_COMPRESS = $(Convert-Path .)
          $ZIP_INCLUDE = "loreline.exe"
          $ZIP_DESTINATION = 'loreline-windows.zip'
          $ZIP_FILES = Get-ChildItem -Path $ZIP_COMPRESS -Filter $ZIP_INCLUDE
          Compress-Archive -Path $ZIP_FILES -DestinationPath $ZIP_DESTINATION -CompressionLevel Optimal

      - name: Upload Files
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: loreline-windows.zip
          path: loreline-windows.zip
          compression-level: 0


  build-loreline-mac:
    runs-on: macos-14
    steps:

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Haxe
        working-directory: .
        run: |
          set -ex
          export NEKOPATH=$PWD'/git/haxe-binary/mac/neko'
          export HAXEPATH=$PWD'/git/haxe-binary/mac/haxe'
          echo 'neko path: '$NEKOPATH
          echo 'haxe path: '$HAXEPATH
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/share/haxe
          sudo ln -s $HAXEPATH/haxe                 /usr/local/bin/haxe
          sudo ln -s $HAXEPATH/haxelib              /usr/local/bin/haxelib
          sudo ln -s $HAXEPATH/haxe-bin             /usr/local/bin/haxe-bin
          sudo ln -s $HAXEPATH/haxelib-bin          /usr/local/bin/haxelib-bin
          sudo ln -s $HAXEPATH/std                  /usr/local/share/haxe/std
          sudo ln -s $NEKOPATH/neko                 /usr/local/bin/neko
          sudo ln -s $NEKOPATH/nekoc                /usr/local/bin/nekoc
          sudo ln -s $NEKOPATH/nekoml               /usr/local/bin/nekoml
          sudo ln -s $NEKOPATH/nekotools            /usr/local/bin/nekotools
          sudo ln -s $NEKOPATH                      /usr/local/lib/neko
          sudo ln -s $NEKOPATH/libneko.dylib        /usr/local/lib/libneko.dylib
          sudo ln -s $NEKOPATH/libneko.2.4.0.dylib  /usr/local/lib/libneko.2.4.0.dylib
          sudo ln -s $NEKOPATH/libneko.2.dylib      /usr/local/lib/libneko.2.dylib
          set +x
          echo 'neko: '$(neko -version)
          echo 'haxe: '$(haxe --version)

      - name: Build loreline
        working-directory: .
        run: |
          node ./install --cpp

      - name: Run loreline
        working-directory: .
        run: |
          ./loreline

      - name: Check loreline version
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: .
        run: |
          GIT_TAG=${GITHUB_REF/refs\/tags\//}
          ./loreline version --check-tag $GIT_TAG

      - name: Run unit tests
        working-directory: .
        run: |
          ./loreline test ./test

      - name: Create zip archive
        run: zip --symlinks -9 'loreline-mac.zip' loreline

      - name: Upload Files
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: loreline-mac.zip
          path: loreline-mac.zip
          compression-level: 0


  build-loreline-linux:
    strategy:
      matrix:
        include:
          - os: "ubuntu-22.04"
            arch: "x86_64"
          - os: "ubuntu-22.04-arm"
            arch: "arm64"
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Haxe
        working-directory: .
        run: |
          export NEKOPATH=$PWD'/git/haxe-binary/linux-${{ matrix.arch }}/neko'
          export HAXEPATH=$PWD'/git/haxe-binary/linux-${{ matrix.arch }}/haxe'
          echo 'neko path: '$NEKOPATH
          echo 'haxe path: '$HAXEPATH
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/share/haxe
          sudo ln -s $HAXEPATH/haxe                 /usr/local/bin/haxe
          sudo ln -s $HAXEPATH/haxelib              /usr/local/bin/haxelib
          sudo ln -s $HAXEPATH/haxe-bin             /usr/local/bin/haxe-bin
          sudo ln -s $HAXEPATH/haxelib-bin          /usr/local/bin/haxelib-bin
          sudo ln -s $HAXEPATH/std                  /usr/local/share/haxe/std
          sudo ln -s $NEKOPATH/neko                 /usr/local/bin/neko
          sudo ln -s $NEKOPATH/nekoc                /usr/local/bin/nekoc
          sudo ln -s $NEKOPATH/nekoml               /usr/local/bin/nekoml
          sudo ln -s $NEKOPATH/nekotools            /usr/local/bin/nekotools
          sudo ln -s $NEKOPATH                      /usr/local/lib/neko
          sudo ln -s $NEKOPATH/libneko.so           /usr/local/lib/libneko.so
          sudo ln -s $NEKOPATH/libneko.so.2.4.0     /usr/local/lib/libneko.so.2.4.0
          sudo ln -s $NEKOPATH/libneko.so.2         /usr/local/lib/libneko.so.2
          sudo ldconfig
          sudo ldconfig /usr/local/lib
          echo 'neko: '$(neko -version)
          echo 'haxe: '$(haxe --version)

      - name: Build loreline
        working-directory: .
        run: |
          node ./install --cpp

      - name: Run loreline
        working-directory: .
        run: |
          ./loreline

      - name: Check loreline version
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: .
        run: |
          GIT_TAG=${GITHUB_REF/refs\/tags\//}
          ./loreline version --check-tag $GIT_TAG

      - name: Run unit tests
        working-directory: .
        run: |
          ./loreline test ./test

      - name: Create zip archive
        run: zip --symlinks -9 'loreline-linux-${{ matrix.arch }}.zip' loreline

      - name: Upload Files
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: loreline-linux-${{ matrix.arch }}.zip
          path: loreline-linux-${{ matrix.arch }}.zip
          compression-level: 0


  build-loreline-csharp:
    runs-on: "ubuntu-22.04"
    steps:

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Display dotnet version
        run: dotnet --version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Haxe
        working-directory: .
        run: |
          export NEKOPATH=$PWD'/git/haxe-binary/linux-x86_64/neko'
          export HAXEPATH=$PWD'/git/haxe-binary/linux-x86_64/haxe'
          echo 'neko path: '$NEKOPATH
          echo 'haxe path: '$HAXEPATH
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib
          sudo mkdir -p /usr/local/share/haxe
          sudo ln -s $HAXEPATH/haxe                 /usr/local/bin/haxe
          sudo ln -s $HAXEPATH/haxelib              /usr/local/bin/haxelib
          sudo ln -s $HAXEPATH/haxe-bin             /usr/local/bin/haxe-bin
          sudo ln -s $HAXEPATH/haxelib-bin          /usr/local/bin/haxelib-bin
          sudo ln -s $HAXEPATH/std                  /usr/local/share/haxe/std
          sudo ln -s $NEKOPATH/neko                 /usr/local/bin/neko
          sudo ln -s $NEKOPATH/nekoc                /usr/local/bin/nekoc
          sudo ln -s $NEKOPATH/nekoml               /usr/local/bin/nekoml
          sudo ln -s $NEKOPATH/nekotools            /usr/local/bin/nekotools
          sudo ln -s $NEKOPATH                      /usr/local/lib/neko
          sudo ln -s $NEKOPATH/libneko.so           /usr/local/lib/libneko.so
          sudo ln -s $NEKOPATH/libneko.so.2.4.0     /usr/local/lib/libneko.so.2.4.0
          sudo ln -s $NEKOPATH/libneko.so.2         /usr/local/lib/libneko.so.2
          sudo ldconfig
          sudo ldconfig /usr/local/lib
          echo 'neko: '$(neko -version)
          echo 'haxe: '$(haxe --version)

      - name: Build loreline
        working-directory: .
        run: |
          node ./install --cs --cs-dll

      - name: Create zip archive
        working-directory: cs
        run: zip -r '../loreline-csharp.zip' ./*

      - name: Upload Files
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: loreline-csharp.zip
          path: loreline-csharp.zip
          compression-level: 0

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-loreline-windows, build-loreline-mac, build-loreline-linux, build-loreline-csharp]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download loreline-windows.zip
        uses: actions/download-artifact@v4
        with:
          name: loreline-windows.zip
          path: .

      - name: Download loreline-mac.zip
        uses: actions/download-artifact@v4
        with:
          name: loreline-mac.zip
          path: .

      - name: Download loreline-linux-x86_64.zip
        uses: actions/download-artifact@v4
        with:
          name: loreline-linux-x86_64.zip
          path: .

      - name: Download loreline-linux-arm64.zip
        uses: actions/download-artifact@v4
        with:
          name: loreline-linux-arm64.zip
          path: .

      - name: Download loreline-csharp.zip
        uses: actions/download-artifact@v4
        with:
          name: loreline-csharp.zip
          path: .

      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Loreline ${{ env.TAG_NAME }}
          body: |
            Loreline ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: |
            loreline-windows.zip
            loreline-mac.zip
            loreline-linux-x86_64.zip
            loreline-linux-arm64.zip
            loreline-csharp.zip
